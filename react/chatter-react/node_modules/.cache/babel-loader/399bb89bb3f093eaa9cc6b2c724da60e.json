{"ast":null,"code":"var _jsxFileName = \"/home/xeg/dev/chatter-web/frontend/react/chatter-react/src/components/Video/Video.tsx\",\n    _s = $RefreshSig$();\n\nimport { useMutation, useSubscription } from \"@apollo/client\";\nimport Box from \"@mui/material/Box\";\nimport { useContext, useRef, useState } from \"react\";\nimport ReactPlayer from \"react-player\";\nimport { UsrContxt } from \"../../App\";\nimport { UPDATE_VIDEO, VIDEO_STATUS_SUBSCRIPTION } from \"../../queries/Video\";\nimport { useContainerDimension } from \"../../util/ResizeUtil\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar PlayerState;\n\n(function (PlayerState) {\n  PlayerState[PlayerState[\"UNSTARTED\"] = -1] = \"UNSTARTED\";\n  PlayerState[PlayerState[\"ENDED\"] = 0] = \"ENDED\";\n  PlayerState[PlayerState[\"PLAYING\"] = 1] = \"PLAYING\";\n  PlayerState[PlayerState[\"PAUSED\"] = 2] = \"PAUSED\";\n  PlayerState[PlayerState[\"BUFFERING\"] = 3] = \"BUFFERING\";\n  PlayerState[PlayerState[\"VIDEO_CUED\"] = 5] = \"VIDEO_CUED\";\n})(PlayerState || (PlayerState = {}));\n\nconst defaultPlayerProps = {\n  pip: false,\n  playing: true,\n  controls: true,\n  light: false,\n  volume: 0.8,\n  muted: false,\n  played: 0,\n  loaded: 0,\n  duration: 0,\n  playbackRate: 1.0,\n  loop: false\n};\n\nfunction Video(_ref) {\n  _s();\n\n  let {\n    videoId\n  } = _ref;\n  const YOUTUBE_URL = \"https://www.youtube.com/watch?v=\";\n  const userContext = useContext(UsrContxt);\n  const [playerProps, setPlayerProps] = useState(defaultPlayerProps);\n  const ytContainer = useRef(null);\n  const videoSize = useContainerDimension(ytContainer);\n  const playerRef = useRef(null);\n  const videoRef = useRef(null);\n  const [playing, setPlaying] = useState(false);\n  const videoChanges = useSubscription(VIDEO_STATUS_SUBSCRIPTION, {\n    variables: {\n      lobbyId: userContext.lobbyId,\n      userId: userContext.userId\n    }\n  });\n  const [updateVideo, updateVideoProperties] = useMutation(UPDATE_VIDEO);\n  const videoContainerStyle = {\n    display: \"flex\"\n  };\n\n  const onStateChangeHandler = event => {// setVideoState((prev: State) => ({\n    //   ...prev,\n    //   playerState: getPlayerState(event.data),\n    // }));\n  };\n\n  const onReadyHandler = () => {\n    if (!playing) setTimeout(() => setPlaying(true), 100);\n  }; // const onPlayHandler = (): void => {\n  //   console.log(playerRef.current);\n  //   const { lobbyId, userId } = userContext;\n  //   if (!playerRef.current) return;\n  //   setPlayerProps((values) => ({\n  //     ...values,\n  //     playing: true,\n  //   }));\n  //   updateVideo({\n  //     variables: {\n  //       statusInput: {\n  //         currTime: +playerRef.current.getCurrentTime().toFixed(0),\n  //         lobbyId,\n  //         userId,\n  //         status: PlayerState.PLAYING,\n  //       },\n  //     },\n  //   });\n  // };\n  // const onPauseHandler = (): void => {\n  //   const { lobbyId, userId } = userContext;\n  //   if (!playerRef.current) return;\n  //   setPlayerProps((values) => ({\n  //     ...values,\n  //     playing: false,\n  //   }));\n  //   updateVideo({\n  //     variables: {\n  //       statusInput: {\n  //         currTime: +playerRef.current.getCurrentTime().toFixed(0),\n  //         lobbyId,\n  //         userId,\n  //         status: PlayerState.PAUSED,\n  //       },\n  //     },\n  //   });\n  // };\n  // const onEndHandler = (event: YouTubeEvent<number>): void => {};\n  // const onErrorHandler = (event: YouTubeEvent<number>): void => {};\n  // const getPlayerState = (eventData: number): PlayerState => {\n  //   switch (eventData) {\n  //     case 0:\n  //       return PlayerState.ENDED;\n  //     case 1:\n  //       return PlayerState.PLAYING;\n  //     case 2:\n  //       return PlayerState.PAUSED;\n  //     case 3:\n  //       return PlayerState.BUFFERING;\n  //     case 5:\n  //       return PlayerState.VIDEO_CUED;\n  //     default:\n  //       return PlayerState.UNSTARTED;\n  //   }\n  // };\n  // useEffect(() => {\n  //   if (videoChanges?.data?.videoStatusChanged) {\n  //     const { currTime, status } = videoChanges.data.videoStatusChanged.data;\n  //     console.log(\"received \" + status + \" \", status);\n  //     switch (getPlayerState(status)) {\n  //       case PlayerState.PLAYING:\n  //         setPlayerProps((values) => ({\n  //           ...values,\n  //           playing: true,\n  //         }));\n  //         break;\n  //       case PlayerState.PAUSED:\n  //         setPlayerProps((values) => ({\n  //           ...values,\n  //           playing: false,\n  //         }));\n  //         break;\n  //       case PlayerState.UNSTARTED:\n  //       case PlayerState.ENDED:\n  //       default:\n  //         break;\n  //     }\n  //   }\n  // }, [videoChanges.data]);\n  // useEffect(() => {\n  //   setPlayerProps((values) => ({\n  //     ...values,\n  //     url: YOUTUBE_URL + videoId,\n  //     playing: true,\n  //     played: 0,\n  //     loaded: 0,\n  //     pip: false,\n  //     loop: false,\n  //   }));\n  // }, []);\n  // useEffect(() => {\n  //   setPlayerProps((values) => ({\n  //     ...values,\n  //     onPlay: onPlayHandler,\n  //     onPause: onPauseHandler,\n  //   }));\n  // }, [userContext]);\n  // useEffect(() => {\n  //   setPlayerProps((values) => ({\n  //     ...values,\n  //     width: videoSize.width,\n  //     height: videoSize.height,\n  //   }));\n  // }, [videoSize]);\n\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: videoContainerStyle,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"70vw\",\n        height: \"99vh\"\n      },\n      children: /*#__PURE__*/_jsxDEV(ReactPlayer, {\n        url: \"https://www.youtube.com/watch?v=\" + videoId,\n        playing: playing,\n        onReady: onReadyHandler // {...playerProps}\n        // ref={playerRef}\n        ,\n        playsinline: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 209,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Video, \"SSbLlJXgu/NoC0NHsVQynyjLX/c=\", false, function () {\n  return [useContainerDimension, useSubscription, useMutation];\n});\n\n_c = Video;\nexport default Video;\n\nvar _c;\n\n$RefreshReg$(_c, \"Video\");","map":{"version":3,"names":["useMutation","useSubscription","Box","useContext","useRef","useState","ReactPlayer","UsrContxt","UPDATE_VIDEO","VIDEO_STATUS_SUBSCRIPTION","useContainerDimension","PlayerState","defaultPlayerProps","pip","playing","controls","light","volume","muted","played","loaded","duration","playbackRate","loop","Video","videoId","YOUTUBE_URL","userContext","playerProps","setPlayerProps","ytContainer","videoSize","playerRef","videoRef","setPlaying","videoChanges","variables","lobbyId","userId","updateVideo","updateVideoProperties","videoContainerStyle","display","onStateChangeHandler","event","onReadyHandler","setTimeout","width","height"],"sources":["/home/xeg/dev/chatter-web/frontend/react/chatter-react/src/components/Video/Video.tsx"],"sourcesContent":["import {\n  MutationTuple,\n  SubscriptionResult,\n  useMutation,\n  useSubscription,\n} from \"@apollo/client\";\nimport Box from \"@mui/material/Box\";\nimport { SxProps } from \"@mui/system\";\nimport { eventNames } from \"process\";\nimport { useContext, useEffect, useRef, useState } from \"react\";\nimport ReactPlayer, { ReactPlayerProps } from \"react-player\";\nimport YouTube, { YouTubeEvent, YouTubeProps } from \"react-youtube\";\nimport { UsrContxt } from \"../../App\";\nimport { UPDATE_VIDEO, VIDEO_STATUS_SUBSCRIPTION } from \"../../queries/Video\";\nimport { useContainerDimension } from \"../../util/ResizeUtil\";\nimport UpdateVideoStatusRequest from \"../Chatter/interface/requests/UpdateVideoStatusRequest\";\nimport GenericResponse from \"../Chatter/interface/response/GenericResponse\";\nimport VideoStatusTopicResponse from \"../Chatter/interface/response/VideoStatusTopicResponse\";\n\ninterface VideoProps {\n  videoId: string;\n}\n\ninterface LobbyIdProps {\n  lobbyId: string;\n}\ninterface UserIdProps {\n  userIdProps: string;\n}\n\nenum PlayerState {\n  UNSTARTED = -1,\n  ENDED = 0,\n  PLAYING = 1,\n  PAUSED = 2,\n  BUFFERING = 3,\n  VIDEO_CUED = 5,\n}\n\nconst defaultPlayerProps: ReactPlayerProps = {\n  pip: false,\n  playing: true,\n  controls: true,\n  light: false,\n  volume: 0.8,\n  muted: false,\n  played: 0,\n  loaded: 0,\n  duration: 0,\n  playbackRate: 1.0,\n  loop: false,\n};\n\nfunction Video({ videoId }: VideoProps): JSX.Element {\n  const YOUTUBE_URL = \"https://www.youtube.com/watch?v=\";\n  const userContext = useContext(UsrContxt);\n  const [playerProps, setPlayerProps] =\n    useState<ReactPlayerProps>(defaultPlayerProps);\n  const ytContainer = useRef<HTMLDivElement>(null);\n  const videoSize = useContainerDimension(ytContainer);\n  const playerRef = useRef<ReactPlayer>(null);\n  const videoRef = useRef<YouTube>(null);\n  const [playing, setPlaying] = useState<boolean>(false);\n\n  const videoChanges: SubscriptionResult<\n    { videoStatusChanged: VideoStatusTopicResponse },\n    { lobbyId: LobbyIdProps; userId: UserIdProps }\n  > = useSubscription(VIDEO_STATUS_SUBSCRIPTION, {\n    variables: {\n      lobbyId: userContext.lobbyId,\n      userId: userContext.userId,\n    },\n  });\n\n  const [updateVideo, updateVideoProperties]: MutationTuple<\n    { updateVideoStatus: GenericResponse },\n    { statusInput: UpdateVideoStatusRequest }\n  > = useMutation(UPDATE_VIDEO);\n\n  const videoContainerStyle: SxProps = {\n    display: \"flex\",\n  };\n\n  const onStateChangeHandler = (event: YouTubeEvent<number>): void => {\n    // setVideoState((prev: State) => ({\n    //   ...prev,\n    //   playerState: getPlayerState(event.data),\n    // }));\n  };\n\n  const onReadyHandler = (): void => {\n    if (!playing) setTimeout(() => setPlaying(true), 100);\n  };\n\n  // const onPlayHandler = (): void => {\n  //   console.log(playerRef.current);\n  //   const { lobbyId, userId } = userContext;\n  //   if (!playerRef.current) return;\n  //   setPlayerProps((values) => ({\n  //     ...values,\n  //     playing: true,\n  //   }));\n  //   updateVideo({\n  //     variables: {\n  //       statusInput: {\n  //         currTime: +playerRef.current.getCurrentTime().toFixed(0),\n  //         lobbyId,\n  //         userId,\n  //         status: PlayerState.PLAYING,\n  //       },\n  //     },\n  //   });\n  // };\n\n  // const onPauseHandler = (): void => {\n  //   const { lobbyId, userId } = userContext;\n  //   if (!playerRef.current) return;\n  //   setPlayerProps((values) => ({\n  //     ...values,\n  //     playing: false,\n  //   }));\n  //   updateVideo({\n  //     variables: {\n  //       statusInput: {\n  //         currTime: +playerRef.current.getCurrentTime().toFixed(0),\n  //         lobbyId,\n  //         userId,\n  //         status: PlayerState.PAUSED,\n  //       },\n  //     },\n  //   });\n  // };\n\n  // const onEndHandler = (event: YouTubeEvent<number>): void => {};\n\n  // const onErrorHandler = (event: YouTubeEvent<number>): void => {};\n\n  // const getPlayerState = (eventData: number): PlayerState => {\n  //   switch (eventData) {\n  //     case 0:\n  //       return PlayerState.ENDED;\n  //     case 1:\n  //       return PlayerState.PLAYING;\n  //     case 2:\n  //       return PlayerState.PAUSED;\n  //     case 3:\n  //       return PlayerState.BUFFERING;\n  //     case 5:\n  //       return PlayerState.VIDEO_CUED;\n  //     default:\n  //       return PlayerState.UNSTARTED;\n  //   }\n  // };\n\n  // useEffect(() => {\n  //   if (videoChanges?.data?.videoStatusChanged) {\n  //     const { currTime, status } = videoChanges.data.videoStatusChanged.data;\n  //     console.log(\"received \" + status + \" \", status);\n  //     switch (getPlayerState(status)) {\n  //       case PlayerState.PLAYING:\n  //         setPlayerProps((values) => ({\n  //           ...values,\n  //           playing: true,\n  //         }));\n  //         break;\n  //       case PlayerState.PAUSED:\n  //         setPlayerProps((values) => ({\n  //           ...values,\n  //           playing: false,\n  //         }));\n  //         break;\n  //       case PlayerState.UNSTARTED:\n  //       case PlayerState.ENDED:\n  //       default:\n  //         break;\n  //     }\n  //   }\n  // }, [videoChanges.data]);\n\n  // useEffect(() => {\n  //   setPlayerProps((values) => ({\n  //     ...values,\n  //     url: YOUTUBE_URL + videoId,\n  //     playing: true,\n  //     played: 0,\n  //     loaded: 0,\n  //     pip: false,\n  //     loop: false,\n  //   }));\n  // }, []);\n\n  // useEffect(() => {\n  //   setPlayerProps((values) => ({\n  //     ...values,\n  //     onPlay: onPlayHandler,\n  //     onPause: onPauseHandler,\n  //   }));\n  // }, [userContext]);\n\n  // useEffect(() => {\n  //   setPlayerProps((values) => ({\n  //     ...values,\n  //     width: videoSize.width,\n  //     height: videoSize.height,\n  //   }));\n  // }, [videoSize]);\n\n  return (\n    <Box sx={videoContainerStyle}>\n      <div style={{ width: \"70vw\", height: \"99vh\" }}>\n        <ReactPlayer\n          url={\"https://www.youtube.com/watch?v=\" + videoId}\n          playing={playing}\n          onReady={onReadyHandler}\n          // {...playerProps}\n          // ref={playerRef}\n          playsinline\n        ></ReactPlayer>\n      </div>\n    </Box>\n  );\n}\n\nexport default Video;\n"],"mappings":";;;AAAA,SAGEA,WAHF,EAIEC,eAJF,QAKO,gBALP;AAMA,OAAOC,GAAP,MAAgB,mBAAhB;AAGA,SAASC,UAAT,EAAgCC,MAAhC,EAAwCC,QAAxC,QAAwD,OAAxD;AACA,OAAOC,WAAP,MAA8C,cAA9C;AAEA,SAASC,SAAT,QAA0B,WAA1B;AACA,SAASC,YAAT,EAAuBC,yBAAvB,QAAwD,qBAAxD;AACA,SAASC,qBAAT,QAAsC,uBAAtC;;IAgBKC,W;;WAAAA,W;EAAAA,W,CAAAA,W;EAAAA,W,CAAAA,W;EAAAA,W,CAAAA,W;EAAAA,W,CAAAA,W;EAAAA,W,CAAAA,W;EAAAA,W,CAAAA,W;GAAAA,W,KAAAA,W;;AASL,MAAMC,kBAAoC,GAAG;EAC3CC,GAAG,EAAE,KADsC;EAE3CC,OAAO,EAAE,IAFkC;EAG3CC,QAAQ,EAAE,IAHiC;EAI3CC,KAAK,EAAE,KAJoC;EAK3CC,MAAM,EAAE,GALmC;EAM3CC,KAAK,EAAE,KANoC;EAO3CC,MAAM,EAAE,CAPmC;EAQ3CC,MAAM,EAAE,CARmC;EAS3CC,QAAQ,EAAE,CATiC;EAU3CC,YAAY,EAAE,GAV6B;EAW3CC,IAAI,EAAE;AAXqC,CAA7C;;AAcA,SAASC,KAAT,OAAqD;EAAA;;EAAA,IAAtC;IAAEC;EAAF,CAAsC;EACnD,MAAMC,WAAW,GAAG,kCAApB;EACA,MAAMC,WAAW,GAAGxB,UAAU,CAACI,SAAD,CAA9B;EACA,MAAM,CAACqB,WAAD,EAAcC,cAAd,IACJxB,QAAQ,CAAmBO,kBAAnB,CADV;EAEA,MAAMkB,WAAW,GAAG1B,MAAM,CAAiB,IAAjB,CAA1B;EACA,MAAM2B,SAAS,GAAGrB,qBAAqB,CAACoB,WAAD,CAAvC;EACA,MAAME,SAAS,GAAG5B,MAAM,CAAc,IAAd,CAAxB;EACA,MAAM6B,QAAQ,GAAG7B,MAAM,CAAU,IAAV,CAAvB;EACA,MAAM,CAACU,OAAD,EAAUoB,UAAV,IAAwB7B,QAAQ,CAAU,KAAV,CAAtC;EAEA,MAAM8B,YAGL,GAAGlC,eAAe,CAACQ,yBAAD,EAA4B;IAC7C2B,SAAS,EAAE;MACTC,OAAO,EAAEV,WAAW,CAACU,OADZ;MAETC,MAAM,EAAEX,WAAW,CAACW;IAFX;EADkC,CAA5B,CAHnB;EAUA,MAAM,CAACC,WAAD,EAAcC,qBAAd,IAGFxC,WAAW,CAACQ,YAAD,CAHf;EAKA,MAAMiC,mBAA4B,GAAG;IACnCC,OAAO,EAAE;EAD0B,CAArC;;EAIA,MAAMC,oBAAoB,GAAIC,KAAD,IAAuC,CAClE;IACA;IACA;IACA;EACD,CALD;;EAOA,MAAMC,cAAc,GAAG,MAAY;IACjC,IAAI,CAAC/B,OAAL,EAAcgC,UAAU,CAAC,MAAMZ,UAAU,CAAC,IAAD,CAAjB,EAAyB,GAAzB,CAAV;EACf,CAFD,CArCmD,CAyCnoBACE,QAAC,GAAD;IAAK,EAAE,EAAEO,mBAAT;IAAA,uBACE;MAAK,KAAK,EAAE;QAAEM,KAAK,EAAE,MAAT;QAAiBC,MAAM,EAAE;MAAzB,CAAZ;MAAA,uBACE,QAAC,WAAD;QACE,GAAG,EAAE,qCAAqCvB,OAD5C;QAEE,OAAO,EAAEX,OAFX;QAGE,OAAO,EAAE+B,cAHX,CAIE;QACA;QALF;QAME,WAAW;MANb;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAcD;;GAxKQrB,K;UAMWd,qB,EAQdT,e,EAUAD,W;;;KAxBGwB,K;AA0KT,eAAeA,KAAf"},"metadata":{},"sourceType":"module"}