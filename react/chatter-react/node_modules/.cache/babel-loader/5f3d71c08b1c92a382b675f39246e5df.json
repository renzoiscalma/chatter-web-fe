{"ast":null,"code":"var _jsxFileName = \"/home/xeg/dev/chatter-web/frontend/react/chatter-react/src/components/Chatter/Chatter.tsx\",\n    _s = $RefreshSig$();\n\nimport { useMutation, useQuery, useSubscription } from \"@apollo/client\";\nimport { Divider } from \"@mui/material\";\nimport Box from \"@mui/material/Box\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { useContext, useEffect, useReducer, useRef, useState } from \"react\";\nimport { UsrContxt } from \"../../App\";\nimport { GET_MESSAGES_ON_LOBBY, MESSAGE_ADDED_SUBSCRIPTION, SEND_MESSAGE, USERNAME_CHANGED_SUBSCRIPTION } from \"../../queries/Chatter\";\nimport SendStatus from \"./interface/SendStatus\";\nimport MessageBar from \"./MessageBar\";\nimport Messages from \"./Messages\";\nimport Sender from \"./Sender\";\nimport UserList from \"./UserList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction sendMessageReducer(state, action) {\n  let messages = state;\n\n  switch (action.type) {\n    case \"FETCH_ALL\":\n      return action.payload.map(message => {\n        return {\n          date: new Date(+message.date),\n          message: message.message,\n          sender: message.from.id,\n          senderUsername: message.from.username,\n          to: \"Lobby\",\n          sendStatus: SendStatus.SENT\n        };\n      });\n\n    case SendStatus.FAILED:\n      return {};\n\n    case SendStatus.SENDING:\n      {\n        let {\n          to,\n          sender,\n          message,\n          localDateSent\n        } = action.payload;\n        messages.push(action.payload);\n        action.payload.callback({\n          variables: {\n            addMessageInput: {\n              to,\n              from: sender,\n              message,\n              localDateSent\n            }\n          }\n        });\n        return [...messages];\n      }\n\n    case SendStatus.SENT:\n      {\n        let {\n          localDateSent,\n          sender\n        } = action.payload;\n        let targetMessage = messages.filter(message => message.localDateSent === localDateSent && message.sender === sender);\n        targetMessage[0].sendStatus = SendStatus.SENT;\n        return [...messages];\n      }\n\n    case \"NEW_MESSAGE\":\n      {\n        // todo sort\n        return [...messages, ...action.payload];\n      }\n\n    case \"USERNAME_CHANGED\":\n      {\n        return messages.map(message => {\n          if (message.sender === action.payload.id) return { ...message,\n            senderUsername: action.payload.username\n          };\n          return message;\n        });\n      }\n\n    default:\n      throw new Error();\n  }\n}\n\nfunction Chatter(props) {\n  _s();\n\n  const userContext = useContext(UsrContxt);\n  const bottomDivRef = useRef(null);\n  const theme = useTheme(); // TODO QUERY RESULT ADD PROPER TYPES\n\n  const existingMessages = useQuery(GET_MESSAGES_ON_LOBBY, {\n    variables: {\n      lobbyId: userContext.lobbyId\n    }\n  }); // unless yung state ng message is contained to itself\n\n  const [sendMessage, sendMessageProperties] = useMutation(SEND_MESSAGE);\n  const newMessageSub = useSubscription(MESSAGE_ADDED_SUBSCRIPTION, {\n    variables: {\n      lobbyId: userContext.lobbyId,\n      userId: userContext.userId\n    }\n  });\n  const usernameChangedSub = useSubscription(USERNAME_CHANGED_SUBSCRIPTION, {\n    variables: {\n      lobbyId: userContext.lobbyId,\n      userId: userContext.userId\n    }\n  });\n  const chatterContainer = {\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    bgcolor: theme.chat.bgColor,\n    minWidth: \"inherit\"\n  };\n  let initialMessages = [];\n  const [messages, dispatchMessage] = useReducer(sendMessageReducer, initialMessages);\n  const [initialized, setInitialized] = useState(false);\n  const [showLobbyUsers, setShowLobbyUsers] = useState(false);\n\n  const handleSendMessage = message => {\n    const messageStatusIndex = messages.length;\n    dispatchMessage({\n      type: SendStatus.SENDING,\n      payload: {\n        message: message,\n        sender: userContext.userId,\n        senderUsername: userContext.username,\n        to: userContext.lobbyId,\n        sendStatus: SendStatus.SENDING,\n        index: messageStatusIndex,\n        localDateSent: new Date().getTime() + \"\",\n        callback: sendMessage\n      }\n    });\n  };\n\n  useEffect(() => {\n    var _bottomDivRef$current;\n\n    if (!props.chatHidden) bottomDivRef === null || bottomDivRef === void 0 ? void 0 : (_bottomDivRef$current = bottomDivRef.current) === null || _bottomDivRef$current === void 0 ? void 0 : _bottomDivRef$current.scrollIntoView();\n  }, [messages]);\n  useEffect(() => {\n    var _existingMessages$dat, _existingMessages$dat2;\n\n    if (!initialized && (_existingMessages$dat = existingMessages.data) !== null && _existingMessages$dat !== void 0 && (_existingMessages$dat2 = _existingMessages$dat.getMessagesOnLobby) !== null && _existingMessages$dat2 !== void 0 && _existingMessages$dat2.success) {\n      setInitialized(true);\n      dispatchMessage({\n        type: \"FETCH_ALL\",\n        payload: existingMessages.data.getMessagesOnLobby.data\n      });\n    }\n  }, [initialized, existingMessages.data]);\n  useEffect(() => {\n    if (sendMessageProperties !== null && sendMessageProperties !== void 0 && sendMessageProperties.data) {\n      let {\n        message,\n        localDateSent\n      } = sendMessageProperties.data.addMessage;\n      dispatchMessage({\n        type: SendStatus.SENT,\n        payload: { ...message,\n          localDateSent,\n          sender: message.from.id\n        }\n      });\n    }\n\n    if (sendMessageProperties !== null && sendMessageProperties !== void 0 && sendMessageProperties.error) {\n      console.log(\"ERROR HAS OCCURED\");\n    }\n  }, [sendMessageProperties.data, sendMessageProperties === null || sendMessageProperties === void 0 ? void 0 : sendMessageProperties.error]);\n  useEffect(() => {\n    var _newMessageSub$data;\n\n    // todo add types\n    if (newMessageSub !== null && newMessageSub !== void 0 && (_newMessageSub$data = newMessageSub.data) !== null && _newMessageSub$data !== void 0 && _newMessageSub$data.messageAdded) dispatchMessage({\n      type: \"NEW_MESSAGE\",\n      payload: newMessageSub.data.messageAdded.messages.map(value => ({ ...value,\n        sender: value.from.id,\n        senderUsername: value.from.username,\n        date: new Date(String(value.date))\n      }))\n    });\n  }, [newMessageSub]);\n  useEffect(() => {\n    var _usernameChangedSub$d;\n\n    if (usernameChangedSub !== null && usernameChangedSub !== void 0 && (_usernameChangedSub$d = usernameChangedSub.data) !== null && _usernameChangedSub$d !== void 0 && _usernameChangedSub$d.usernameChanged) {\n      dispatchMessage({\n        type: \"USERNAME_CHANGED\",\n        payload: usernameChangedSub.data.usernameChanged.data\n      });\n    }\n  }, [usernameChangedSub.data]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: chatterContainer,\n    children: [/*#__PURE__*/_jsxDEV(MessageBar, { ...props,\n      setShowLobbyUsers: setShowLobbyUsers,\n      showLobbyUsers: showLobbyUsers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }, this), showLobbyUsers ? /*#__PURE__*/_jsxDEV(UserList, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Messages, {\n      messages: messages,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: bottomDivRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Sender, {\n      handleSendMessage: handleSendMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 239,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Chatter, \"Z1wv90/JWlE0tLSxs20b2JBmfXg=\", false, function () {\n  return [useTheme, useQuery, useMutation, useSubscription, useSubscription];\n});\n\n_c = Chatter;\nexport default Chatter;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chatter\");","map":{"version":3,"names":["useMutation","useQuery","useSubscription","Divider","Box","useTheme","useContext","useEffect","useReducer","useRef","useState","UsrContxt","GET_MESSAGES_ON_LOBBY","MESSAGE_ADDED_SUBSCRIPTION","SEND_MESSAGE","USERNAME_CHANGED_SUBSCRIPTION","SendStatus","MessageBar","Messages","Sender","UserList","sendMessageReducer","state","action","messages","type","payload","map","message","date","Date","sender","from","id","senderUsername","username","to","sendStatus","SENT","FAILED","SENDING","localDateSent","push","callback","variables","addMessageInput","targetMessage","filter","Error","Chatter","props","userContext","bottomDivRef","theme","existingMessages","lobbyId","sendMessage","sendMessageProperties","newMessageSub","userId","usernameChangedSub","chatterContainer","height","display","flexDirection","bgcolor","chat","bgColor","minWidth","initialMessages","dispatchMessage","initialized","setInitialized","showLobbyUsers","setShowLobbyUsers","handleSendMessage","messageStatusIndex","length","index","getTime","chatHidden","current","scrollIntoView","data","getMessagesOnLobby","success","addMessage","error","console","log","messageAdded","value","String","usernameChanged"],"sources":["/home/xeg/dev/chatter-web/frontend/react/chatter-react/src/components/Chatter/Chatter.tsx"],"sourcesContent":["import {\n  QueryResult,\n  SubscriptionResult,\n  useMutation,\n  useQuery,\n  useSubscription,\n} from \"@apollo/client\";\nimport { Divider, SxProps } from \"@mui/material\";\nimport Box from \"@mui/material/Box\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { useContext, useEffect, useReducer, useRef, useState } from \"react\";\nimport { UsrContxt } from \"../../App\";\nimport {\n  GET_MESSAGES_ON_LOBBY,\n  MESSAGE_ADDED_SUBSCRIPTION,\n  SEND_MESSAGE,\n  USERNAME_CHANGED_SUBSCRIPTION,\n} from \"../../queries/Chatter\";\nimport Message from \"./interface/Message\";\nimport NewMessageSubResponse from \"./interface/response/NewMessageSubResponse\";\nimport UsernameChangedSubResponse from \"./interface/response/UsernameChangedSubResponse\";\nimport SendStatus from \"./interface/SendStatus\";\nimport MessageBar from \"./MessageBar\";\nimport Messages from \"./Messages\";\nimport Sender from \"./Sender\";\nimport UserList from \"./UserList\";\ninterface LobbyIdProps {\n  lobbyId: string;\n}\n\ninterface UserIdProps {\n  userIdProps: string;\n}\n\ninterface ChatterProps {\n  chatHidden: boolean;\n  setChatHidden: Function;\n}\n\ntype MESSAGEACTIONTYPE =\n  | { type: \"FETCH_ALL\"; payload: any } // todo change proper types\n  | { type: SendStatus.FAILED; payload: Message & { localDateSent: string } }\n  | {\n      type: SendStatus.SENDING;\n      payload: Message & { index: number; callback: Function };\n    }\n  | { type: SendStatus.SENT; payload: Message & { localDateSent: string } }\n  | { type: \"NEW_MESSAGE\"; payload: Message[] }\n  | {\n      type: \"USERNAME_CHANGED\";\n      payload: { username: string; id: string };\n    };\n\nfunction sendMessageReducer(\n  state: Message[],\n  action: MESSAGEACTIONTYPE\n): Message[] {\n  let messages = state;\n  switch (action.type) {\n    case \"FETCH_ALL\":\n      return action.payload.map((message: any): Message => {\n        return {\n          date: new Date(+message.date),\n          message: message.message,\n          sender: message.from.id,\n          senderUsername: message.from.username,\n          to: \"Lobby\",\n          sendStatus: SendStatus.SENT,\n        };\n      });\n    case SendStatus.FAILED:\n      return {} as Message[];\n    case SendStatus.SENDING: {\n      let { to, sender, message, localDateSent } = action.payload;\n      messages.push(action.payload);\n      action.payload.callback({\n        variables: {\n          addMessageInput: {\n            to,\n            from: sender,\n            message,\n            localDateSent,\n          },\n        },\n      });\n      return [...messages];\n    }\n    case SendStatus.SENT: {\n      let { localDateSent, sender } = action.payload;\n      let targetMessage = messages.filter(\n        (message) =>\n          message.localDateSent === localDateSent && message.sender === sender\n      );\n      targetMessage[0].sendStatus = SendStatus.SENT;\n      return [...messages];\n    }\n    case \"NEW_MESSAGE\": {\n      // todo sort\n      return [...messages, ...action.payload];\n    }\n    case \"USERNAME_CHANGED\": {\n      return messages.map((message: Message) => {\n        if (message.sender === action.payload.id)\n          return {\n            ...message,\n            senderUsername: action.payload.username,\n          };\n        return message;\n      });\n    }\n    default:\n      throw new Error();\n  }\n}\n\nfunction Chatter(props: ChatterProps) {\n  const userContext = useContext(UsrContxt);\n  const bottomDivRef = useRef<HTMLDivElement>(null);\n  const theme = useTheme();\n  // TODO QUERY RESULT ADD PROPER TYPES\n  const existingMessages: QueryResult<any, any> = useQuery(\n    GET_MESSAGES_ON_LOBBY,\n    { variables: { lobbyId: userContext.lobbyId } }\n  );\n\n  // unless yung state ng message is contained to itself\n  const [sendMessage, sendMessageProperties] = useMutation(SEND_MESSAGE);\n\n  const newMessageSub: SubscriptionResult<\n    { messageAdded: NewMessageSubResponse },\n    { lobbyId: LobbyIdProps; userId: UserIdProps }\n  > = useSubscription(MESSAGE_ADDED_SUBSCRIPTION, {\n    variables: {\n      lobbyId: userContext.lobbyId,\n      userId: userContext.userId,\n    },\n  });\n\n  const usernameChangedSub: SubscriptionResult<\n    {\n      usernameChanged: { data: UsernameChangedSubResponse };\n    },\n    { lobbyId: LobbyIdProps; userId: UserIdProps }\n  > = useSubscription(USERNAME_CHANGED_SUBSCRIPTION, {\n    variables: {\n      lobbyId: userContext.lobbyId,\n      userId: userContext.userId,\n    },\n  });\n\n  const chatterContainer: SxProps = {\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    bgcolor: theme.chat.bgColor,\n    minWidth: \"inherit\",\n  };\n\n  let initialMessages: Message[] = [] as Message[];\n\n  const [messages, dispatchMessage] = useReducer(\n    sendMessageReducer,\n    initialMessages\n  );\n\n  const [initialized, setInitialized] = useState<boolean>(false);\n  const [showLobbyUsers, setShowLobbyUsers] = useState<boolean>(false);\n\n  const handleSendMessage = (message: string) => {\n    const messageStatusIndex: number = messages.length;\n\n    dispatchMessage({\n      type: SendStatus.SENDING,\n      payload: {\n        message: message,\n        sender: userContext.userId,\n        senderUsername: userContext.username,\n        to: userContext.lobbyId,\n        sendStatus: SendStatus.SENDING,\n        index: messageStatusIndex,\n        localDateSent: new Date().getTime() + \"\",\n        callback: sendMessage,\n      },\n    });\n  };\n\n  useEffect(() => {\n    if (!props.chatHidden) bottomDivRef?.current?.scrollIntoView();\n  }, [messages]);\n\n  useEffect(() => {\n    if (!initialized && existingMessages.data?.getMessagesOnLobby?.success) {\n      setInitialized(true);\n      dispatchMessage({\n        type: \"FETCH_ALL\",\n        payload: existingMessages.data.getMessagesOnLobby.data,\n      });\n    }\n  }, [initialized, existingMessages.data]);\n\n  useEffect(() => {\n    if (sendMessageProperties?.data) {\n      let { message, localDateSent } = sendMessageProperties.data.addMessage;\n      dispatchMessage({\n        type: SendStatus.SENT,\n        payload: { ...message, localDateSent, sender: message.from.id },\n      });\n    }\n\n    if (sendMessageProperties?.error) {\n      console.log(\"ERROR HAS OCCURED\");\n    }\n  }, [sendMessageProperties.data, sendMessageProperties?.error]);\n\n  useEffect(() => {\n    // todo add types\n    if (newMessageSub?.data?.messageAdded)\n      dispatchMessage({\n        type: \"NEW_MESSAGE\",\n        payload: newMessageSub.data.messageAdded.messages.map((value: any) => ({\n          ...value,\n          sender: value.from.id,\n          senderUsername: value.from.username,\n          date: new Date(String(value.date)),\n        })),\n      });\n  }, [newMessageSub]);\n\n  useEffect(() => {\n    if (usernameChangedSub?.data?.usernameChanged) {\n      dispatchMessage({\n        type: \"USERNAME_CHANGED\",\n        payload: usernameChangedSub.data.usernameChanged.data,\n      });\n    }\n  }, [usernameChangedSub.data]);\n\n  return (\n    <Box sx={chatterContainer}>\n      <MessageBar\n        {...props}\n        setShowLobbyUsers={setShowLobbyUsers}\n        showLobbyUsers={showLobbyUsers}\n      />\n      {showLobbyUsers ? (\n        <UserList />\n      ) : (\n        <Messages messages={messages}>\n          <div ref={bottomDivRef} />\n        </Messages>\n      )}\n      <Divider></Divider>\n      <Sender handleSendMessage={handleSendMessage}></Sender>\n    </Box>\n  );\n}\n\nexport default Chatter;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}