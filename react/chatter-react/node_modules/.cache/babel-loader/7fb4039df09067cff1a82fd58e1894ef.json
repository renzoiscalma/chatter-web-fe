{"ast":null,"code":"var _jsxFileName = \"/home/xeg/dev/chatter-web/frontend/react/chatter-react/src/index.tsx\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ApolloClient, InMemoryCache, ApolloProvider, HttpLink, split } from \"@apollo/client\";\nimport { GraphQLWsLink } from \"@apollo/client/link/subscriptions\";\nimport { createClient } from \"graphql-ws\";\nimport { getMainDefinition } from \"@apollo/client/utilities\";\nimport { createBrowserRouter, RouterProvider } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nconst httpLink = new HttpLink({\n  uri: process.env.REACT_APP_LOCAL_BACKEND_URI\n});\nconst wsLink = new GraphQLWsLink(createClient({\n  url: process.env.REACT_APP_LOCAL_WS_URL ? process.env.REACT_APP_LOCAL_WS_URL : \"\" // connectionParams: { TODO !!!!!\n  //   authToken: userEvent.Token\n  // }\n\n}));\nconst splitLink = split(_ref => {\n  let {\n    query\n  } = _ref;\n  const definition = getMainDefinition(query);\n  console.log(definition);\n  return definition.kind === \"OperationDefinition\" && definition.operation === \"subscription\";\n}, wsLink, httpLink);\nconst client = new ApolloClient({\n  link: splitLink,\n  cache: new InMemoryCache()\n});\nconst router = createBrowserRouter([{\n  path: \"/\",\n  element: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 14\n  }, this)\n}]);\nroot.render( /*#__PURE__*/_jsxDEV(ApolloProvider, {\n  client: client,\n  children: /*#__PURE__*/_jsxDEV(RouterProvider, {\n    router: router\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 62,\n  columnNumber: 3\n}, this)); // If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals();","map":{"version":3,"names":["ReactDOM","App","reportWebVitals","ApolloClient","InMemoryCache","ApolloProvider","HttpLink","split","GraphQLWsLink","createClient","getMainDefinition","createBrowserRouter","RouterProvider","root","createRoot","document","getElementById","httpLink","uri","process","env","REACT_APP_LOCAL_BACKEND_URI","wsLink","url","REACT_APP_LOCAL_WS_URL","splitLink","query","definition","console","log","kind","operation","client","link","cache","router","path","element","render"],"sources":["/home/xeg/dev/chatter-web/frontend/react/chatter-react/src/index.tsx"],"sourcesContent":["import ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  HttpLink,\n  split,\n} from \"@apollo/client\";\nimport { GraphQLWsLink } from \"@apollo/client/link/subscriptions\";\nimport { createClient } from \"graphql-ws\";\nimport { getMainDefinition } from \"@apollo/client/utilities\";\nimport { createBrowserRouter, RouterProvider } from \"react-router-dom\";\n\nconst root = ReactDOM.createRoot(\n  document.getElementById(\"root\") as HTMLElement\n);\n\nconst httpLink = new HttpLink({\n  uri: process.env.REACT_APP_LOCAL_BACKEND_URI,\n});\n\nconst wsLink = new GraphQLWsLink(\n  createClient({\n    url: process.env.REACT_APP_LOCAL_WS_URL\n      ? process.env.REACT_APP_LOCAL_WS_URL\n      : \"\",\n    // connectionParams: { TODO !!!!!\n    //   authToken: userEvent.Token\n    // }\n  })\n);\n\nconst splitLink = split(\n  ({ query }) => {\n    const definition = getMainDefinition(query);\n    console.log(definition);\n    return (\n      definition.kind === \"OperationDefinition\" &&\n      definition.operation === \"subscription\"\n    );\n  },\n  wsLink,\n  httpLink\n);\n\nconst client = new ApolloClient({\n  link: splitLink,\n  cache: new InMemoryCache(),\n});\n\nconst router = createBrowserRouter([\n  {\n    path: \"/\",\n    element: <App />,\n  },\n]);\n\nroot.render(\n  <ApolloProvider client={client}>\n    <RouterProvider router={router} />\n  </ApolloProvider>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"mappings":";AAAA,OAAOA,QAAP,MAAqB,kBAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SACEC,YADF,EAEEC,aAFF,EAGEC,cAHF,EAIEC,QAJF,EAKEC,KALF,QAMO,gBANP;AAOA,SAASC,aAAT,QAA8B,mCAA9B;AACA,SAASC,YAAT,QAA6B,YAA7B;AACA,SAASC,iBAAT,QAAkC,0BAAlC;AACA,SAASC,mBAAT,EAA8BC,cAA9B,QAAoD,kBAApD;;AAEA,MAAMC,IAAI,GAAGb,QAAQ,CAACc,UAAT,CACXC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CADW,CAAb;AAIA,MAAMC,QAAQ,GAAG,IAAIX,QAAJ,CAAa;EAC5BY,GAAG,EAAEC,OAAO,CAACC,GAAR,CAAYC;AADW,CAAb,CAAjB;AAIA,MAAMC,MAAM,GAAG,IAAId,aAAJ,CACbC,YAAY,CAAC;EACXc,GAAG,EAAEJ,OAAO,CAACC,GAAR,CAAYI,sBAAZ,GACDL,OAAO,CAACC,GAAR,CAAYI,sBADX,GAED,EAHO,CAIX;EACA;EACA;;AANW,CAAD,CADC,CAAf;AAWA,MAAMC,SAAS,GAAGlB,KAAK,CACrB,QAAe;EAAA,IAAd;IAAEmB;EAAF,CAAc;EACb,MAAMC,UAAU,GAAGjB,iBAAiB,CAACgB,KAAD,CAApC;EACAE,OAAO,CAACC,GAAR,CAAYF,UAAZ;EACA,OACEA,UAAU,CAACG,IAAX,KAAoB,qBAApB,IACAH,UAAU,CAACI,SAAX,KAAyB,cAF3B;AAID,CARoB,EASrBT,MATqB,EAUrBL,QAVqB,CAAvB;AAaA,MAAMe,MAAM,GAAG,IAAI7B,YAAJ,CAAiB;EAC9B8B,IAAI,EAAER,SADwB;EAE9BS,KAAK,EAAE,IAAI9B,aAAJ;AAFuB,CAAjB,CAAf;AAKA,MAAM+B,MAAM,GAAGxB,mBAAmB,CAAC,CACjC;EACEyB,IAAI,EAAE,GADR;EAEEC,OAAO,eAAE,QAAC,GAAD;IAAA;IAAA;IAAA;EAAA;AAFX,CADiC,CAAD,CAAlC;AAOAxB,IAAI,CAACyB,MAAL,eACE,QAAC,cAAD;EAAgB,MAAM,EAAEN,MAAxB;EAAA,uBACE,QAAC,cAAD;IAAgB,MAAM,EAAEG;EAAxB;IAAA;IAAA;IAAA;EAAA;AADF;EAAA;EAAA;EAAA;AAAA,QADF,E,CAMA;AACA;AACA;;AACAjC,eAAe"},"metadata":{},"sourceType":"module"}