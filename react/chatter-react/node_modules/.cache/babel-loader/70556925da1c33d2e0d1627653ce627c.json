{"ast":null,"code":"/**\n *\n * common\n *\n */\nimport { areGraphQLErrors, extendedTypeof, isObject } from './utils.mjs';\n/**\n * The WebSocket sub-protocol used for the [GraphQL over WebSocket Protocol](/PROTOCOL.md).\n *\n * @category Common\n */\n\nexport const GRAPHQL_TRANSPORT_WS_PROTOCOL = 'graphql-transport-ws';\n/**\n * The deprecated subprotocol used by [subscriptions-transport-ws](https://github.com/apollographql/subscriptions-transport-ws).\n *\n * @private\n */\n\nexport const DEPRECATED_GRAPHQL_WS_PROTOCOL = 'graphql-ws';\n/**\n * `graphql-ws` expected and standard close codes of the [GraphQL over WebSocket Protocol](/PROTOCOL.md).\n *\n * @category Common\n */\n\nexport var CloseCode;\n\n(function (CloseCode) {\n  CloseCode[CloseCode[\"InternalServerError\"] = 4500] = \"InternalServerError\";\n  CloseCode[CloseCode[\"InternalClientError\"] = 4005] = \"InternalClientError\";\n  CloseCode[CloseCode[\"BadRequest\"] = 4400] = \"BadRequest\";\n  CloseCode[CloseCode[\"BadResponse\"] = 4004] = \"BadResponse\";\n  /** Tried subscribing before connect ack */\n\n  CloseCode[CloseCode[\"Unauthorized\"] = 4401] = \"Unauthorized\";\n  CloseCode[CloseCode[\"Forbidden\"] = 4403] = \"Forbidden\";\n  CloseCode[CloseCode[\"SubprotocolNotAcceptable\"] = 4406] = \"SubprotocolNotAcceptable\";\n  CloseCode[CloseCode[\"ConnectionInitialisationTimeout\"] = 4408] = \"ConnectionInitialisationTimeout\";\n  CloseCode[CloseCode[\"ConnectionAcknowledgementTimeout\"] = 4504] = \"ConnectionAcknowledgementTimeout\";\n  /** Subscriber distinction is very important */\n\n  CloseCode[CloseCode[\"SubscriberAlreadyExists\"] = 4409] = \"SubscriberAlreadyExists\";\n  CloseCode[CloseCode[\"TooManyInitialisationRequests\"] = 4429] = \"TooManyInitialisationRequests\";\n})(CloseCode || (CloseCode = {}));\n/**\n * Types of messages allowed to be sent by the client/server over the WS protocol.\n *\n * @category Common\n */\n\n\nexport var MessageType;\n\n(function (MessageType) {\n  MessageType[\"ConnectionInit\"] = \"connection_init\";\n  MessageType[\"ConnectionAck\"] = \"connection_ack\";\n  MessageType[\"Ping\"] = \"ping\";\n  MessageType[\"Pong\"] = \"pong\";\n  MessageType[\"Subscribe\"] = \"subscribe\";\n  MessageType[\"Next\"] = \"next\";\n  MessageType[\"Error\"] = \"error\";\n  MessageType[\"Complete\"] = \"complete\";\n})(MessageType || (MessageType = {}));\n/**\n * Validates the message against the GraphQL over WebSocket Protocol.\n *\n * Invalid messages will throw descriptive errors.\n *\n * @category Common\n */\n\n\nexport function validateMessage(val) {\n  if (!isObject(val)) {\n    throw new Error(`Message is expected to be an object, but got ${extendedTypeof(val)}`);\n  }\n\n  if (!val.type) {\n    throw new Error(`Message is missing the 'type' property`);\n  }\n\n  if (typeof val.type !== 'string') {\n    throw new Error(`Message is expects the 'type' property to be a string, but got ${extendedTypeof(val.type)}`);\n  }\n\n  switch (val.type) {\n    case MessageType.ConnectionInit:\n    case MessageType.ConnectionAck:\n    case MessageType.Ping:\n    case MessageType.Pong:\n      {\n        if ('payload' in val && !isObject(val.payload)) {\n          throw new Error(`\"${val.type}\" message expects the 'payload' property to be an object or missing, but got \"${val.payload}\"`);\n        }\n\n        break;\n      }\n\n    case MessageType.Subscribe:\n      {\n        if (typeof val.id !== 'string') {\n          throw new Error(`\"${val.type}\" message expects the 'id' property to be a string, but got ${extendedTypeof(val.id)}`);\n        }\n\n        if (!val.id) {\n          throw new Error(`\"${val.type}\" message requires a non-empty 'id' property`);\n        }\n\n        if (!isObject(val.payload)) {\n          throw new Error(`\"${val.type}\" message expects the 'payload' property to be an object, but got ${extendedTypeof(val.payload)}`);\n        }\n\n        if (typeof val.payload.query !== 'string') {\n          throw new Error(`\"${val.type}\" message payload expects the 'query' property to be a string, but got ${extendedTypeof(val.payload.query)}`);\n        }\n\n        if (val.payload.variables != null && !isObject(val.payload.variables)) {\n          throw new Error(`\"${val.type}\" message payload expects the 'variables' property to be a an object or nullish or missing, but got ${extendedTypeof(val.payload.variables)}`);\n        }\n\n        if (val.payload.operationName != null && extendedTypeof(val.payload.operationName) !== 'string') {\n          throw new Error(`\"${val.type}\" message payload expects the 'operationName' property to be a string or nullish or missing, but got ${extendedTypeof(val.payload.operationName)}`);\n        }\n\n        if (val.payload.extensions != null && !isObject(val.payload.extensions)) {\n          throw new Error(`\"${val.type}\" message payload expects the 'extensions' property to be a an object or nullish or missing, but got ${extendedTypeof(val.payload.extensions)}`);\n        }\n\n        break;\n      }\n\n    case MessageType.Next:\n      {\n        if (typeof val.id !== 'string') {\n          throw new Error(`\"${val.type}\" message expects the 'id' property to be a string, but got ${extendedTypeof(val.id)}`);\n        }\n\n        if (!val.id) {\n          throw new Error(`\"${val.type}\" message requires a non-empty 'id' property`);\n        }\n\n        if (!isObject(val.payload)) {\n          throw new Error(`\"${val.type}\" message expects the 'payload' property to be an object, but got ${extendedTypeof(val.payload)}`);\n        }\n\n        break;\n      }\n\n    case MessageType.Error:\n      {\n        if (typeof val.id !== 'string') {\n          throw new Error(`\"${val.type}\" message expects the 'id' property to be a string, but got ${extendedTypeof(val.id)}`);\n        }\n\n        if (!val.id) {\n          throw new Error(`\"${val.type}\" message requires a non-empty 'id' property`);\n        }\n\n        if (!areGraphQLErrors(val.payload)) {\n          throw new Error(`\"${val.type}\" message expects the 'payload' property to be an array of GraphQL errors, but got ${JSON.stringify(val.payload)}`);\n        }\n\n        break;\n      }\n\n    case MessageType.Complete:\n      {\n        if (typeof val.id !== 'string') {\n          throw new Error(`\"${val.type}\" message expects the 'id' property to be a string, but got ${extendedTypeof(val.id)}`);\n        }\n\n        if (!val.id) {\n          throw new Error(`\"${val.type}\" message requires a non-empty 'id' property`);\n        }\n\n        break;\n      }\n\n    default:\n      throw new Error(`Invalid message 'type' property \"${val.type}\"`);\n  }\n\n  return val;\n}\n/**\n * Checks if the provided value is a valid GraphQL over WebSocket message.\n *\n * @deprecated Use `validateMessage` instead.\n *\n * @category Common\n */\n\nexport function isMessage(val) {\n  try {\n    validateMessage(val);\n    return true;\n  } catch (_a) {\n    return false;\n  }\n}\n/**\n * Parses the raw websocket message data to a valid message.\n *\n * @category Common\n */\n\nexport function parseMessage(data, reviver) {\n  return validateMessage(typeof data === 'string' ? JSON.parse(data, reviver) : data);\n}\n/**\n * Stringifies a valid message ready to be sent through the socket.\n *\n * @category Common\n */\n\nexport function stringifyMessage(msg, replacer) {\n  validateMessage(msg);\n  return JSON.stringify(msg, replacer);\n}","map":{"version":3,"names":["areGraphQLErrors","extendedTypeof","isObject","GRAPHQL_TRANSPORT_WS_PROTOCOL","DEPRECATED_GRAPHQL_WS_PROTOCOL","CloseCode","MessageType","validateMessage","val","Error","type","ConnectionInit","ConnectionAck","Ping","Pong","payload","Subscribe","id","query","variables","operationName","extensions","Next","JSON","stringify","Complete","isMessage","_a","parseMessage","data","reviver","parse","stringifyMessage","msg","replacer"],"sources":["/home/xeg/dev/chatter-web/frontend/react/chatter-react/node_modules/graphql-ws/lib/common.mjs"],"sourcesContent":["/**\n *\n * common\n *\n */\nimport { areGraphQLErrors, extendedTypeof, isObject } from './utils.mjs';\n/**\n * The WebSocket sub-protocol used for the [GraphQL over WebSocket Protocol](/PROTOCOL.md).\n *\n * @category Common\n */\nexport const GRAPHQL_TRANSPORT_WS_PROTOCOL = 'graphql-transport-ws';\n/**\n * The deprecated subprotocol used by [subscriptions-transport-ws](https://github.com/apollographql/subscriptions-transport-ws).\n *\n * @private\n */\nexport const DEPRECATED_GRAPHQL_WS_PROTOCOL = 'graphql-ws';\n/**\n * `graphql-ws` expected and standard close codes of the [GraphQL over WebSocket Protocol](/PROTOCOL.md).\n *\n * @category Common\n */\nexport var CloseCode;\n(function (CloseCode) {\n    CloseCode[CloseCode[\"InternalServerError\"] = 4500] = \"InternalServerError\";\n    CloseCode[CloseCode[\"InternalClientError\"] = 4005] = \"InternalClientError\";\n    CloseCode[CloseCode[\"BadRequest\"] = 4400] = \"BadRequest\";\n    CloseCode[CloseCode[\"BadResponse\"] = 4004] = \"BadResponse\";\n    /** Tried subscribing before connect ack */\n    CloseCode[CloseCode[\"Unauthorized\"] = 4401] = \"Unauthorized\";\n    CloseCode[CloseCode[\"Forbidden\"] = 4403] = \"Forbidden\";\n    CloseCode[CloseCode[\"SubprotocolNotAcceptable\"] = 4406] = \"SubprotocolNotAcceptable\";\n    CloseCode[CloseCode[\"ConnectionInitialisationTimeout\"] = 4408] = \"ConnectionInitialisationTimeout\";\n    CloseCode[CloseCode[\"ConnectionAcknowledgementTimeout\"] = 4504] = \"ConnectionAcknowledgementTimeout\";\n    /** Subscriber distinction is very important */\n    CloseCode[CloseCode[\"SubscriberAlreadyExists\"] = 4409] = \"SubscriberAlreadyExists\";\n    CloseCode[CloseCode[\"TooManyInitialisationRequests\"] = 4429] = \"TooManyInitialisationRequests\";\n})(CloseCode || (CloseCode = {}));\n/**\n * Types of messages allowed to be sent by the client/server over the WS protocol.\n *\n * @category Common\n */\nexport var MessageType;\n(function (MessageType) {\n    MessageType[\"ConnectionInit\"] = \"connection_init\";\n    MessageType[\"ConnectionAck\"] = \"connection_ack\";\n    MessageType[\"Ping\"] = \"ping\";\n    MessageType[\"Pong\"] = \"pong\";\n    MessageType[\"Subscribe\"] = \"subscribe\";\n    MessageType[\"Next\"] = \"next\";\n    MessageType[\"Error\"] = \"error\";\n    MessageType[\"Complete\"] = \"complete\";\n})(MessageType || (MessageType = {}));\n/**\n * Validates the message against the GraphQL over WebSocket Protocol.\n *\n * Invalid messages will throw descriptive errors.\n *\n * @category Common\n */\nexport function validateMessage(val) {\n    if (!isObject(val)) {\n        throw new Error(`Message is expected to be an object, but got ${extendedTypeof(val)}`);\n    }\n    if (!val.type) {\n        throw new Error(`Message is missing the 'type' property`);\n    }\n    if (typeof val.type !== 'string') {\n        throw new Error(`Message is expects the 'type' property to be a string, but got ${extendedTypeof(val.type)}`);\n    }\n    switch (val.type) {\n        case MessageType.ConnectionInit:\n        case MessageType.ConnectionAck:\n        case MessageType.Ping:\n        case MessageType.Pong: {\n            if ('payload' in val && !isObject(val.payload)) {\n                throw new Error(`\"${val.type}\" message expects the 'payload' property to be an object or missing, but got \"${val.payload}\"`);\n            }\n            break;\n        }\n        case MessageType.Subscribe: {\n            if (typeof val.id !== 'string') {\n                throw new Error(`\"${val.type}\" message expects the 'id' property to be a string, but got ${extendedTypeof(val.id)}`);\n            }\n            if (!val.id) {\n                throw new Error(`\"${val.type}\" message requires a non-empty 'id' property`);\n            }\n            if (!isObject(val.payload)) {\n                throw new Error(`\"${val.type}\" message expects the 'payload' property to be an object, but got ${extendedTypeof(val.payload)}`);\n            }\n            if (typeof val.payload.query !== 'string') {\n                throw new Error(`\"${val.type}\" message payload expects the 'query' property to be a string, but got ${extendedTypeof(val.payload.query)}`);\n            }\n            if (val.payload.variables != null && !isObject(val.payload.variables)) {\n                throw new Error(`\"${val.type}\" message payload expects the 'variables' property to be a an object or nullish or missing, but got ${extendedTypeof(val.payload.variables)}`);\n            }\n            if (val.payload.operationName != null &&\n                extendedTypeof(val.payload.operationName) !== 'string') {\n                throw new Error(`\"${val.type}\" message payload expects the 'operationName' property to be a string or nullish or missing, but got ${extendedTypeof(val.payload.operationName)}`);\n            }\n            if (val.payload.extensions != null && !isObject(val.payload.extensions)) {\n                throw new Error(`\"${val.type}\" message payload expects the 'extensions' property to be a an object or nullish or missing, but got ${extendedTypeof(val.payload.extensions)}`);\n            }\n            break;\n        }\n        case MessageType.Next: {\n            if (typeof val.id !== 'string') {\n                throw new Error(`\"${val.type}\" message expects the 'id' property to be a string, but got ${extendedTypeof(val.id)}`);\n            }\n            if (!val.id) {\n                throw new Error(`\"${val.type}\" message requires a non-empty 'id' property`);\n            }\n            if (!isObject(val.payload)) {\n                throw new Error(`\"${val.type}\" message expects the 'payload' property to be an object, but got ${extendedTypeof(val.payload)}`);\n            }\n            break;\n        }\n        case MessageType.Error: {\n            if (typeof val.id !== 'string') {\n                throw new Error(`\"${val.type}\" message expects the 'id' property to be a string, but got ${extendedTypeof(val.id)}`);\n            }\n            if (!val.id) {\n                throw new Error(`\"${val.type}\" message requires a non-empty 'id' property`);\n            }\n            if (!areGraphQLErrors(val.payload)) {\n                throw new Error(`\"${val.type}\" message expects the 'payload' property to be an array of GraphQL errors, but got ${JSON.stringify(val.payload)}`);\n            }\n            break;\n        }\n        case MessageType.Complete: {\n            if (typeof val.id !== 'string') {\n                throw new Error(`\"${val.type}\" message expects the 'id' property to be a string, but got ${extendedTypeof(val.id)}`);\n            }\n            if (!val.id) {\n                throw new Error(`\"${val.type}\" message requires a non-empty 'id' property`);\n            }\n            break;\n        }\n        default:\n            throw new Error(`Invalid message 'type' property \"${val.type}\"`);\n    }\n    return val;\n}\n/**\n * Checks if the provided value is a valid GraphQL over WebSocket message.\n *\n * @deprecated Use `validateMessage` instead.\n *\n * @category Common\n */\nexport function isMessage(val) {\n    try {\n        validateMessage(val);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\n/**\n * Parses the raw websocket message data to a valid message.\n *\n * @category Common\n */\nexport function parseMessage(data, reviver) {\n    return validateMessage(typeof data === 'string' ? JSON.parse(data, reviver) : data);\n}\n/**\n * Stringifies a valid message ready to be sent through the socket.\n *\n * @category Common\n */\nexport function stringifyMessage(msg, replacer) {\n    validateMessage(msg);\n    return JSON.stringify(msg, replacer);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}