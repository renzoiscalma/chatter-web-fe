{"ast":null,"code":"var _jsxFileName = \"/home/xeg/dev/chatter-web/frontend/react/chatter-react/src/components/Chatter/Chatter.tsx\",\n    _s = $RefreshSig$();\n\nimport { useContext, useEffect, useReducer, useRef, useState } from \"react\";\nimport Box from \"@mui/material/Box\";\nimport { Divider } from \"@mui/material\";\nimport Messages from \"./Messages\";\nimport Sender from \"./Sender\";\nimport SendStatus from \"./interface/SendStatus\";\nimport { useMutation, useQuery, useSubscription } from \"@apollo/client\";\nimport { GET_MESSAGES_ON_LOBBY, MESSAGE_ADDED_SUBSCRIPTION, SEND_MESSAGE, USERNAME_CHANGED_SUBSCRIPTION } from \"../../queries/Chatter\";\nimport { UsrContxt } from \"../../App\";\nimport MessageBar from \"./MessageBar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction sendMessageReducer(state, action) {\n  let messages = state;\n\n  switch (action.type) {\n    case \"FETCH_ALL\":\n      return action.payload.map(message => {\n        return {\n          date: new Date(+message.date),\n          message: message.message,\n          sender: message.from.id,\n          senderUsername: message.from.username,\n          to: \"Lobby\",\n          sendStatus: SendStatus.SENT\n        };\n      });\n\n    case SendStatus.FAILED:\n      return {};\n\n    case SendStatus.SENDING:\n      {\n        let {\n          to,\n          sender,\n          message,\n          localDateSent\n        } = action.payload;\n        messages.push(action.payload);\n        action.payload.callback({\n          variables: {\n            addMessageInput: {\n              to,\n              from: sender,\n              message,\n              localDateSent\n            }\n          }\n        });\n        return [...messages];\n      }\n\n    case SendStatus.SENT:\n      {\n        let {\n          localDateSent,\n          sender\n        } = action.payload;\n        console.log(action.payload, messages);\n        let targetMessage = messages.filter(message => message.localDateSent === localDateSent && message.sender === sender);\n        targetMessage[0].sendStatus = SendStatus.SENT;\n        console.log(targetMessage);\n        return [...messages];\n      }\n\n    case \"NEW_MESSAGE\":\n      {\n        // todo sort\n        return [...messages, ...action.payload];\n      }\n\n    default:\n      throw new Error();\n  }\n}\n\nfunction Chatter() {\n  _s();\n\n  const userContext = useContext(UsrContxt);\n  const bottomDivRef = useRef(null); // TODO QUERY RESULT ADD PROPER TYPES\n\n  const existingMessages = useQuery(GET_MESSAGES_ON_LOBBY, {\n    variables: {\n      lobbyId: userContext.lobbyId\n    }\n  }); // unless yung state ng message is contained to itself\n\n  const [sendMessage, sendMessageProperties] = useMutation(SEND_MESSAGE);\n  const newMessageSub = useSubscription(MESSAGE_ADDED_SUBSCRIPTION, {\n    variables: {\n      lobbyId: userContext.lobbyId,\n      userId: userContext.userId\n    }\n  });\n  const usernameChangedSub = useSubscription(USERNAME_CHANGED_SUBSCRIPTION, {\n    variables: {\n      lobbyId: userContext.lobbyId,\n      userId: userContext.userId\n    }\n  });\n  const chatterContainer = {\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\"\n  };\n  let initialMessages = [];\n  const [messages, dispatchMessage] = useReducer(sendMessageReducer, initialMessages);\n  const [initialized, setInitialized] = useState(false);\n\n  const handleSendMessage = message => {\n    const messageStatusIndex = messages.length;\n    dispatchMessage({\n      type: SendStatus.SENDING,\n      payload: {\n        message: message,\n        sender: userContext.userId,\n        senderUsername: userContext.username,\n        to: userContext.lobbyId,\n        sendStatus: SendStatus.SENDING,\n        index: messageStatusIndex,\n        localDateSent: new Date().getTime() + \"\",\n        callback: sendMessage\n      }\n    });\n  };\n\n  useEffect(() => {\n    var _bottomDivRef$current;\n\n    bottomDivRef === null || bottomDivRef === void 0 ? void 0 : (_bottomDivRef$current = bottomDivRef.current) === null || _bottomDivRef$current === void 0 ? void 0 : _bottomDivRef$current.scrollIntoView();\n  }, [messages]);\n  useEffect(() => {\n    var _existingMessages$dat, _existingMessages$dat2;\n\n    if (!initialized && (_existingMessages$dat = existingMessages.data) !== null && _existingMessages$dat !== void 0 && (_existingMessages$dat2 = _existingMessages$dat.getMessagesOnLobby) !== null && _existingMessages$dat2 !== void 0 && _existingMessages$dat2.success) {\n      setInitialized(true);\n      dispatchMessage({\n        type: \"FETCH_ALL\",\n        payload: existingMessages.data.getMessagesOnLobby.data\n      });\n    }\n  }, [initialized, existingMessages.data]);\n  useEffect(() => {\n    if (sendMessageProperties !== null && sendMessageProperties !== void 0 && sendMessageProperties.data) {\n      let {\n        message,\n        localDateSent\n      } = sendMessageProperties.data.addMessage;\n      dispatchMessage({\n        type: SendStatus.SENT,\n        payload: { ...message,\n          localDateSent,\n          sender: message.from.id\n        }\n      });\n    }\n\n    if (sendMessageProperties !== null && sendMessageProperties !== void 0 && sendMessageProperties.error) {\n      console.log(\"ERROR HAS OCCURED\");\n    }\n  }, [sendMessageProperties.data, sendMessageProperties === null || sendMessageProperties === void 0 ? void 0 : sendMessageProperties.error]);\n  useEffect(() => {\n    var _newMessageSub$data;\n\n    // todo add types\n    if (newMessageSub !== null && newMessageSub !== void 0 && (_newMessageSub$data = newMessageSub.data) !== null && _newMessageSub$data !== void 0 && _newMessageSub$data.messageAdded) dispatchMessage({\n      type: \"NEW_MESSAGE\",\n      payload: newMessageSub.data.messageAdded.messages\n    });\n  }, [newMessageSub]); // useEffect(() => {\n  //   if (usernameChangedSub?.data?.usernameChanged) {\n  //     console.log(usernameChangedSub.data.usernameChanged);\n  //     const modifiedMessages: Messages[] = messages.map((message: Message) => {\n  //       if (message.sender === usernameCHange)\n  //     })\n  //   }\n  // }, [usernameChangedSub]);\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: chatterContainer,\n    children: [/*#__PURE__*/_jsxDEV(MessageBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Messages, {\n      messages: messages,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: bottomDivRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Sender, {\n      handleSendMessage: handleSendMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 207,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Chatter, \"2x7/2wCXluwne0cqoIJKPy62vm4=\", false, function () {\n  return [useQuery, useMutation, useSubscription, useSubscription];\n});\n\n_c = Chatter;\nexport default Chatter;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chatter\");","map":{"version":3,"names":["useContext","useEffect","useReducer","useRef","useState","Box","Divider","Messages","Sender","SendStatus","useMutation","useQuery","useSubscription","GET_MESSAGES_ON_LOBBY","MESSAGE_ADDED_SUBSCRIPTION","SEND_MESSAGE","USERNAME_CHANGED_SUBSCRIPTION","UsrContxt","MessageBar","sendMessageReducer","state","action","messages","type","payload","map","message","date","Date","sender","from","id","senderUsername","username","to","sendStatus","SENT","FAILED","SENDING","localDateSent","push","callback","variables","addMessageInput","console","log","targetMessage","filter","Error","Chatter","userContext","bottomDivRef","existingMessages","lobbyId","sendMessage","sendMessageProperties","newMessageSub","userId","usernameChangedSub","chatterContainer","height","display","flexDirection","initialMessages","dispatchMessage","initialized","setInitialized","handleSendMessage","messageStatusIndex","length","index","getTime","current","scrollIntoView","data","getMessagesOnLobby","success","addMessage","error","messageAdded"],"sources":["/home/xeg/dev/chatter-web/frontend/react/chatter-react/src/components/Chatter/Chatter.tsx"],"sourcesContent":["import { useContext, useEffect, useReducer, useRef, useState } from \"react\";\nimport Box from \"@mui/material/Box\";\nimport { Divider, SxProps } from \"@mui/material\";\nimport Messages from \"./Messages\";\nimport Sender from \"./Sender\";\nimport Message from \"./interface/Message\";\nimport SendStatus from \"./interface/SendStatus\";\nimport {\n  MutationTuple,\n  QueryResult,\n  SubscriptionResult,\n  useMutation,\n  useQuery,\n  useSubscription,\n} from \"@apollo/client\";\nimport {\n  GET_MESSAGES_ON_LOBBY,\n  MESSAGE_ADDED_SUBSCRIPTION,\n  SEND_MESSAGE,\n  USERNAME_CHANGED_SUBSCRIPTION,\n} from \"../../queries/Chatter\";\nimport { UsrContxt } from \"../../App\";\nimport MessageBar from \"./MessageBar\";\n\ninterface LobbyIdProps {\n  lobbyId: string;\n}\n\ninterface UserIdProps {\n  userIdProps: string;\n}\n\ntype MESSAGEACTIONTYPE =\n  | { type: \"FETCH_ALL\"; payload: any } // todo change proper types\n  | { type: SendStatus.FAILED; payload: Message & { localDateSent: string } }\n  | {\n      type: SendStatus.SENDING;\n      payload: Message & { index: number; callback: Function };\n    }\n  | { type: SendStatus.SENT; payload: Message & { localDateSent: string } }\n  | { type: \"NEW_MESSAGE\"; payload: Message[] };\n\nfunction sendMessageReducer(\n  state: Message[],\n  action: MESSAGEACTIONTYPE\n): Message[] {\n  let messages = state;\n  switch (action.type) {\n    case \"FETCH_ALL\":\n      return action.payload.map((message: any): Message => {\n        return {\n          date: new Date(+message.date),\n          message: message.message,\n          sender: message.from.id,\n          senderUsername: message.from.username,\n          to: \"Lobby\",\n          sendStatus: SendStatus.SENT,\n        };\n      });\n    case SendStatus.FAILED:\n      return {} as Message[];\n    case SendStatus.SENDING: {\n      let { to, sender, message, localDateSent } = action.payload;\n      messages.push(action.payload);\n      action.payload.callback({\n        variables: {\n          addMessageInput: {\n            to,\n            from: sender,\n            message,\n            localDateSent,\n          },\n        },\n      });\n      return [...messages];\n    }\n    case SendStatus.SENT: {\n      let { localDateSent, sender } = action.payload;\n      console.log(action.payload, messages);\n      let targetMessage = messages.filter(\n        (message) =>\n          message.localDateSent === localDateSent && message.sender === sender\n      );\n      targetMessage[0].sendStatus = SendStatus.SENT;\n      console.log(targetMessage);\n      return [...messages];\n    }\n    case \"NEW_MESSAGE\": {\n      // todo sort\n      return [...messages, ...action.payload];\n    }\n    default:\n      throw new Error();\n  }\n}\n\nfunction Chatter() {\n  const userContext = useContext(UsrContxt);\n  const bottomDivRef = useRef<HTMLDivElement>(null);\n  // TODO QUERY RESULT ADD PROPER TYPES\n  const existingMessages: QueryResult<any, any> = useQuery(\n    GET_MESSAGES_ON_LOBBY,\n    { variables: { lobbyId: userContext.lobbyId } }\n  );\n\n  // unless yung state ng message is contained to itself\n  const [sendMessage, sendMessageProperties] = useMutation(SEND_MESSAGE);\n\n  const newMessageSub: SubscriptionResult<\n    any,\n    {\n      lobbyId: LobbyIdProps;\n      userId: UserIdProps;\n    }\n  > = useSubscription(MESSAGE_ADDED_SUBSCRIPTION, {\n    variables: {\n      lobbyId: userContext.lobbyId,\n      userId: userContext.userId,\n    },\n  });\n\n  const usernameChangedSub = useSubscription(USERNAME_CHANGED_SUBSCRIPTION, {\n    variables: {\n      lobbyId: userContext.lobbyId,\n      userId: userContext.userId,\n    },\n  });\n\n  const chatterContainer: SxProps = {\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n  };\n\n  let initialMessages: Message[] = [] as Message[];\n  const [messages, dispatchMessage] = useReducer(\n    sendMessageReducer,\n    initialMessages\n  );\n  const [initialized, setInitialized] = useState<boolean>(false);\n\n  const handleSendMessage = (message: string) => {\n    const messageStatusIndex: number = messages.length;\n\n    dispatchMessage({\n      type: SendStatus.SENDING,\n      payload: {\n        message: message,\n        sender: userContext.userId,\n        senderUsername: userContext.username,\n        to: userContext.lobbyId,\n        sendStatus: SendStatus.SENDING,\n        index: messageStatusIndex,\n        localDateSent: new Date().getTime() + \"\",\n        callback: sendMessage,\n      },\n    });\n  };\n\n  useEffect(() => {\n    bottomDivRef?.current?.scrollIntoView();\n  }, [messages]);\n\n  useEffect(() => {\n    if (!initialized && existingMessages.data?.getMessagesOnLobby?.success) {\n      setInitialized(true);\n      dispatchMessage({\n        type: \"FETCH_ALL\",\n        payload: existingMessages.data.getMessagesOnLobby.data,\n      });\n    }\n  }, [initialized, existingMessages.data]);\n\n  useEffect(() => {\n    if (sendMessageProperties?.data) {\n      let { message, localDateSent } = sendMessageProperties.data.addMessage;\n      dispatchMessage({\n        type: SendStatus.SENT,\n        payload: { ...message, localDateSent, sender: message.from.id },\n      });\n    }\n\n    if (sendMessageProperties?.error) {\n      console.log(\"ERROR HAS OCCURED\");\n    }\n  }, [sendMessageProperties.data, sendMessageProperties?.error]);\n\n  useEffect(() => {\n    // todo add types\n    if (newMessageSub?.data?.messageAdded)\n      dispatchMessage({\n        type: \"NEW_MESSAGE\",\n        payload: newMessageSub.data.messageAdded.messages as Message[],\n      });\n  }, [newMessageSub]);\n\n  // useEffect(() => {\n  //   if (usernameChangedSub?.data?.usernameChanged) {\n  //     console.log(usernameChangedSub.data.usernameChanged);\n  //     const modifiedMessages: Messages[] = messages.map((message: Message) => {\n  //       if (message.sender === usernameCHange)\n  //     })\n  //   }\n  // }, [usernameChangedSub]);\n\n  return (\n    <Box sx={chatterContainer}>\n      <MessageBar></MessageBar>\n      <Messages messages={messages}>\n        <div ref={bottomDivRef} />\n      </Messages>\n      <Divider></Divider>\n      <Sender handleSendMessage={handleSendMessage}></Sender>\n    </Box>\n  );\n}\n\nexport default Chatter;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}