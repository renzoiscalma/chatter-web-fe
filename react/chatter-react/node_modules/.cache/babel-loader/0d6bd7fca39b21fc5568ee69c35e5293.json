{"ast":null,"code":"var _jsxFileName = \"/home/xeg/dev/chatter-web/frontend/react/chatter-react/src/components/Chatter/Chatter.tsx\",\n    _s = $RefreshSig$();\n\nimport { useMutation, useQuery, useSubscription } from \"@apollo/client\";\nimport { Divider } from \"@mui/material\";\nimport Box from \"@mui/material/Box\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { useContext, useEffect, useReducer, useRef, useState } from \"react\";\nimport { UsrContxt } from \"../../App\";\nimport { GET_CURR_USERS_ON_LOBBY, GET_MESSAGES_ON_LOBBY, MESSAGE_ADDED_SUBSCRIPTION, SEND_MESSAGE, USERNAME_CHANGED_SUBSCRIPTION, USER_LIST_CHANGED_SUBSCRIPTION } from \"../../queries/Chatter\";\nimport SendStatus from \"./interface/SendStatus\";\nimport MessageBar from \"./MessageBar\";\nimport Messages from \"./Messages\";\nimport Sender from \"./Sender\";\nimport UserList from \"./UserList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction sendMessageReducer(state, action) {\n  let messages = state;\n\n  switch (action.type) {\n    case \"FETCH_ALL\":\n      return action.payload.map(message => {\n        return {\n          date: new Date(+message.date),\n          message: message.message,\n          sender: message.from.id,\n          senderUsername: message.from.username,\n          to: \"Lobby\",\n          sendStatus: SendStatus.SENT,\n          sendType: 1\n        };\n      });\n\n    case SendStatus.FAILED:\n      return {};\n\n    case SendStatus.SENDING:\n      {\n        let {\n          to,\n          sender,\n          message,\n          localDateSent\n        } = action.payload;\n        messages.push(action.payload);\n        action.payload.callback({\n          variables: {\n            addMessageInput: {\n              to,\n              from: sender,\n              message,\n              localDateSent\n            }\n          }\n        });\n        return [...messages];\n      }\n\n    case SendStatus.SENT:\n      {\n        let {\n          localDateSent,\n          sender\n        } = action.payload;\n        let targetMessage = messages.filter(message => message.localDateSent === localDateSent && message.sender === sender);\n        targetMessage[0].sendStatus = SendStatus.SENT;\n        return [...messages];\n      }\n\n    case \"NEW_MESSAGE\":\n      {\n        // todo sort\n        return [...messages, ...action.payload];\n      }\n\n    case \"USERNAME_CHANGED\":\n      {\n        return messages.map(message => {\n          if (message.sender === action.payload.id) return { ...message,\n            senderUsername: action.payload.username\n          };\n          return message;\n        });\n      }\n\n    default:\n      throw new Error();\n  }\n}\n\nfunction Chatter(props) {\n  _s();\n\n  const userContext = useContext(UsrContxt);\n  const bottomDivRef = useRef(null);\n  const theme = useTheme(); // TODO QUERY RESULT ADD PROPER TYPES\n\n  const existingMessages = useQuery(GET_MESSAGES_ON_LOBBY, {\n    variables: {\n      lobbyId: userContext.lobbyId\n    }\n  });\n  const getCurrentUsersOnLobby = useQuery(GET_CURR_USERS_ON_LOBBY, {\n    variables: {\n      lobbyId: userContext.lobbyId\n    }\n  }); // unless yung state ng message is contained to itself\n\n  const [sendMessage, sendMessageProperties] = useMutation(SEND_MESSAGE);\n  const newMessageSub = useSubscription(MESSAGE_ADDED_SUBSCRIPTION, {\n    variables: {\n      lobbyId: userContext.lobbyId,\n      userId: userContext.userId\n    }\n  });\n  const userListChangedSub = useSubscription(USER_LIST_CHANGED_SUBSCRIPTION, {\n    variables: {\n      lobbyId: userContext.lobbyId\n    }\n  });\n  const usernameChangedSub = useSubscription(USERNAME_CHANGED_SUBSCRIPTION, {\n    variables: {\n      lobbyId: userContext.lobbyId,\n      userId: userContext.userId\n    }\n  });\n  const chatterContainer = {\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    bgcolor: theme.chat.bgColor,\n    minWidth: \"inherit\"\n  };\n  let initialMessages = [];\n  const [messages, dispatchMessage] = useReducer(sendMessageReducer, initialMessages);\n  const [initialized, setInitialized] = useState(false);\n  const [showLobbyUsers, setShowLobbyUsers] = useState(false);\n  const [currentLobbyUsers, setCurrentLobbyUsers] = useState([]);\n\n  const handleSendMessage = message => {\n    const messageStatusIndex = messages.length;\n    dispatchMessage({\n      type: SendStatus.SENDING,\n      payload: {\n        message: message,\n        sender: userContext.userId,\n        senderUsername: userContext.username,\n        to: userContext.lobbyId,\n        sendStatus: SendStatus.SENDING,\n        index: messageStatusIndex,\n        localDateSent: new Date().getTime() + \"\",\n        callback: sendMessage\n      }\n    });\n  };\n\n  useEffect(() => {\n    var _bottomDivRef$current;\n\n    if (!props.chatHidden && !showLobbyUsers) bottomDivRef === null || bottomDivRef === void 0 ? void 0 : (_bottomDivRef$current = bottomDivRef.current) === null || _bottomDivRef$current === void 0 ? void 0 : _bottomDivRef$current.scrollIntoView();\n  }, [messages, showLobbyUsers, props.chatHidden]);\n  useEffect(() => {\n    var _existingMessages$dat, _existingMessages$dat2;\n\n    if (!initialized && (_existingMessages$dat = existingMessages.data) !== null && _existingMessages$dat !== void 0 && (_existingMessages$dat2 = _existingMessages$dat.getMessagesOnLobby) !== null && _existingMessages$dat2 !== void 0 && _existingMessages$dat2.success) {\n      setInitialized(true);\n      dispatchMessage({\n        type: \"FETCH_ALL\",\n        payload: existingMessages.data.getMessagesOnLobby.data\n      });\n    }\n  }, [initialized, existingMessages.data]);\n  useEffect(() => {\n    if (sendMessageProperties !== null && sendMessageProperties !== void 0 && sendMessageProperties.data) {\n      let {\n        message,\n        localDateSent\n      } = sendMessageProperties.data.addMessage;\n      dispatchMessage({\n        type: SendStatus.SENT,\n        payload: { ...message,\n          localDateSent,\n          sender: message.from.id\n        }\n      });\n    }\n\n    if (sendMessageProperties !== null && sendMessageProperties !== void 0 && sendMessageProperties.error) {\n      console.error(\"ERROR HAS OCCURED\");\n    }\n  }, [sendMessageProperties.data, sendMessageProperties === null || sendMessageProperties === void 0 ? void 0 : sendMessageProperties.error]);\n  useEffect(() => {\n    if (getCurrentUsersOnLobby !== null && getCurrentUsersOnLobby !== void 0 && getCurrentUsersOnLobby.data) {\n      let {\n        data\n      } = getCurrentUsersOnLobby.data.getCurrentUsersOnLobby;\n      setCurrentLobbyUsers(data.map(value => value.username));\n    }\n  }, [getCurrentUsersOnLobby.data]);\n  useEffect(() => {\n    var _newMessageSub$data;\n\n    // todo add types\n    if (newMessageSub !== null && newMessageSub !== void 0 && (_newMessageSub$data = newMessageSub.data) !== null && _newMessageSub$data !== void 0 && _newMessageSub$data.messageAdded) dispatchMessage({\n      type: \"NEW_MESSAGE\",\n      payload: newMessageSub.data.messageAdded.messages.map(value => ({ ...value,\n        sender: value.from.id,\n        senderUsername: value.from.username,\n        date: new Date(String(value.date)),\n        sendType: 1\n      }))\n    });\n  }, [newMessageSub]);\n  useEffect(() => {\n    var _userListChangedSub$d;\n\n    if ((_userListChangedSub$d = userListChangedSub.data) !== null && _userListChangedSub$d !== void 0 && _userListChangedSub$d.userListChanged) {\n      let {\n        data\n      } = userListChangedSub.data.userListChanged;\n      let dataLobbyUsers = data.map(value => value.username);\n      setCurrentLobbyUsers(dataLobbyUsers);\n      let newUser = currentLobbyUsers.filter(user => {\n        return dataLobbyUsers.includes(user);\n      }); // compare data and current lobby and\n\n      dispatchMessage({\n        type: \"NEW_MESSAGE\",\n        payload: [{\n          message: `Hey`,\n          sender: \"Admin\",\n          to: \"\",\n          sendType: -1\n        }]\n      });\n    }\n  }, [userListChangedSub]);\n  useEffect(() => {\n    var _usernameChangedSub$d;\n\n    if (usernameChangedSub !== null && usernameChangedSub !== void 0 && (_usernameChangedSub$d = usernameChangedSub.data) !== null && _usernameChangedSub$d !== void 0 && _usernameChangedSub$d.usernameChanged) {\n      dispatchMessage({\n        type: \"USERNAME_CHANGED\",\n        payload: usernameChangedSub.data.usernameChanged.data\n      });\n    }\n  }, [usernameChangedSub.data]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: chatterContainer,\n    children: [/*#__PURE__*/_jsxDEV(MessageBar, { ...props,\n      setShowLobbyUsers: setShowLobbyUsers,\n      showLobbyUsers: showLobbyUsers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 7\n    }, this), showLobbyUsers ? /*#__PURE__*/_jsxDEV(UserList, {\n      users: currentLobbyUsers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Messages, {\n      messages: messages,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: bottomDivRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Sender, {\n      handleSendMessage: handleSendMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 302,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Chatter, \"IIBghXffeG0DtGDgHyFcJYPVJRc=\", false, function () {\n  return [useTheme, useQuery, useQuery, useMutation, useSubscription, useSubscription, useSubscription];\n});\n\n_c = Chatter;\nexport default Chatter;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chatter\");","map":{"version":3,"names":["useMutation","useQuery","useSubscription","Divider","Box","useTheme","useContext","useEffect","useReducer","useRef","useState","UsrContxt","GET_CURR_USERS_ON_LOBBY","GET_MESSAGES_ON_LOBBY","MESSAGE_ADDED_SUBSCRIPTION","SEND_MESSAGE","USERNAME_CHANGED_SUBSCRIPTION","USER_LIST_CHANGED_SUBSCRIPTION","SendStatus","MessageBar","Messages","Sender","UserList","sendMessageReducer","state","action","messages","type","payload","map","message","date","Date","sender","from","id","senderUsername","username","to","sendStatus","SENT","sendType","FAILED","SENDING","localDateSent","push","callback","variables","addMessageInput","targetMessage","filter","Error","Chatter","props","userContext","bottomDivRef","theme","existingMessages","lobbyId","getCurrentUsersOnLobby","sendMessage","sendMessageProperties","newMessageSub","userId","userListChangedSub","usernameChangedSub","chatterContainer","height","display","flexDirection","bgcolor","chat","bgColor","minWidth","initialMessages","dispatchMessage","initialized","setInitialized","showLobbyUsers","setShowLobbyUsers","currentLobbyUsers","setCurrentLobbyUsers","handleSendMessage","messageStatusIndex","length","index","getTime","chatHidden","current","scrollIntoView","data","getMessagesOnLobby","success","addMessage","error","console","value","messageAdded","String","userListChanged","dataLobbyUsers","newUser","user","includes","usernameChanged"],"sources":["/home/xeg/dev/chatter-web/frontend/react/chatter-react/src/components/Chatter/Chatter.tsx"],"sourcesContent":["import {\n  QueryResult,\n  SubscriptionResult,\n  useMutation,\n  useQuery,\n  useSubscription,\n} from \"@apollo/client\";\nimport { Divider, SxProps } from \"@mui/material\";\nimport Box from \"@mui/material/Box\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { useContext, useEffect, useReducer, useRef, useState } from \"react\";\nimport { UsrContxt } from \"../../App\";\nimport {\n  GET_CURR_USERS_ON_LOBBY,\n  GET_MESSAGES_ON_LOBBY,\n  MESSAGE_ADDED_SUBSCRIPTION,\n  SEND_MESSAGE,\n  USERNAME_CHANGED_SUBSCRIPTION,\n  USER_LIST_CHANGED_SUBSCRIPTION,\n} from \"../../queries/Chatter\";\nimport Message from \"./interface/Message\";\nimport GenericResponse from \"./interface/response/GenericResponse\";\nimport NewMessageSubResponse from \"./interface/response/NewMessageSubResponse\";\nimport UsernameChangedSubResponse from \"./interface/response/UsernameChangedSubResponse\";\nimport SendStatus from \"./interface/SendStatus\";\nimport MessageBar from \"./MessageBar\";\nimport Messages from \"./Messages\";\nimport Sender from \"./Sender\";\nimport UserList from \"./UserList\";\ninterface LobbyIdProps {\n  lobbyId: string;\n}\n\ninterface UserIdProps {\n  userIdProps: string;\n}\n\ninterface ChatterProps {\n  chatHidden: boolean;\n  setChatHidden: Function;\n}\n\ntype MESSAGEACTIONTYPE =\n  | { type: \"FETCH_ALL\"; payload: any } // todo change proper types\n  | { type: SendStatus.FAILED; payload: Message & { localDateSent: string } }\n  | {\n      type: SendStatus.SENDING;\n      payload: Message & { index: number; callback: Function };\n    }\n  | { type: SendStatus.SENT; payload: Message & { localDateSent: string } }\n  | { type: \"NEW_MESSAGE\"; payload: Message[] }\n  | {\n      type: \"USERNAME_CHANGED\";\n      payload: { username: string; id: string };\n    };\n\nfunction sendMessageReducer(\n  state: Message[],\n  action: MESSAGEACTIONTYPE\n): Message[] {\n  let messages = state;\n  switch (action.type) {\n    case \"FETCH_ALL\":\n      return action.payload.map((message: any): Message => {\n        return {\n          date: new Date(+message.date),\n          message: message.message,\n          sender: message.from.id,\n          senderUsername: message.from.username,\n          to: \"Lobby\",\n          sendStatus: SendStatus.SENT,\n          sendType: 1,\n        };\n      });\n    case SendStatus.FAILED:\n      return {} as Message[];\n    case SendStatus.SENDING: {\n      let { to, sender, message, localDateSent } = action.payload;\n      messages.push(action.payload);\n      action.payload.callback({\n        variables: {\n          addMessageInput: {\n            to,\n            from: sender,\n            message,\n            localDateSent,\n          },\n        },\n      });\n      return [...messages];\n    }\n    case SendStatus.SENT: {\n      let { localDateSent, sender } = action.payload;\n      let targetMessage = messages.filter(\n        (message) =>\n          message.localDateSent === localDateSent && message.sender === sender\n      );\n      targetMessage[0].sendStatus = SendStatus.SENT;\n      return [...messages];\n    }\n    case \"NEW_MESSAGE\": {\n      // todo sort\n      return [...messages, ...action.payload];\n    }\n    case \"USERNAME_CHANGED\": {\n      return messages.map((message: Message) => {\n        if (message.sender === action.payload.id)\n          return {\n            ...message,\n            senderUsername: action.payload.username,\n          };\n        return message;\n      });\n    }\n    default:\n      throw new Error();\n  }\n}\n\nfunction Chatter(props: ChatterProps) {\n  const userContext = useContext(UsrContxt);\n  const bottomDivRef = useRef<HTMLDivElement>(null);\n  const theme = useTheme();\n  // TODO QUERY RESULT ADD PROPER TYPES\n  const existingMessages: QueryResult<any, any> = useQuery(\n    GET_MESSAGES_ON_LOBBY,\n    { variables: { lobbyId: userContext.lobbyId } }\n  );\n\n  const getCurrentUsersOnLobby: QueryResult<\n    {\n      getCurrentUsersOnLobby: GenericResponse & {\n        data: Array<{ username: string }>;\n      };\n    },\n    {\n      lobbyId: string;\n    }\n  > = useQuery(GET_CURR_USERS_ON_LOBBY, {\n    variables: { lobbyId: userContext.lobbyId },\n  });\n\n  // unless yung state ng message is contained to itself\n  const [sendMessage, sendMessageProperties] = useMutation(SEND_MESSAGE);\n\n  const newMessageSub: SubscriptionResult<\n    { messageAdded: NewMessageSubResponse },\n    { lobbyId: LobbyIdProps; userId: UserIdProps }\n  > = useSubscription(MESSAGE_ADDED_SUBSCRIPTION, {\n    variables: {\n      lobbyId: userContext.lobbyId,\n      userId: userContext.userId,\n    },\n  });\n\n  const userListChangedSub: SubscriptionResult<\n    {\n      userListChanged: GenericResponse & {\n        data: Array<{ username: string }>;\n      };\n    },\n    { lobbyId: string }\n  > = useSubscription(USER_LIST_CHANGED_SUBSCRIPTION, {\n    variables: {\n      lobbyId: userContext.lobbyId,\n    },\n  });\n\n  const usernameChangedSub: SubscriptionResult<\n    {\n      usernameChanged: { data: UsernameChangedSubResponse };\n    },\n    { lobbyId: LobbyIdProps; userId: UserIdProps }\n  > = useSubscription(USERNAME_CHANGED_SUBSCRIPTION, {\n    variables: {\n      lobbyId: userContext.lobbyId,\n      userId: userContext.userId,\n    },\n  });\n\n  const chatterContainer: SxProps = {\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    bgcolor: theme.chat.bgColor,\n    minWidth: \"inherit\",\n  };\n\n  let initialMessages: Message[] = [] as Message[];\n\n  const [messages, dispatchMessage] = useReducer(\n    sendMessageReducer,\n    initialMessages\n  );\n\n  const [initialized, setInitialized] = useState<boolean>(false);\n  const [showLobbyUsers, setShowLobbyUsers] = useState<boolean>(false);\n  const [currentLobbyUsers, setCurrentLobbyUsers] = useState<string[]>([]);\n\n  const handleSendMessage = (message: string) => {\n    const messageStatusIndex: number = messages.length;\n\n    dispatchMessage({\n      type: SendStatus.SENDING,\n      payload: {\n        message: message,\n        sender: userContext.userId,\n        senderUsername: userContext.username,\n        to: userContext.lobbyId,\n        sendStatus: SendStatus.SENDING,\n        index: messageStatusIndex,\n        localDateSent: new Date().getTime() + \"\",\n        callback: sendMessage,\n      },\n    });\n  };\n\n  useEffect(() => {\n    if (!props.chatHidden && !showLobbyUsers)\n      bottomDivRef?.current?.scrollIntoView();\n  }, [messages, showLobbyUsers, props.chatHidden]);\n\n  useEffect(() => {\n    if (!initialized && existingMessages.data?.getMessagesOnLobby?.success) {\n      setInitialized(true);\n      dispatchMessage({\n        type: \"FETCH_ALL\",\n        payload: existingMessages.data.getMessagesOnLobby.data,\n      });\n    }\n  }, [initialized, existingMessages.data]);\n\n  useEffect(() => {\n    if (sendMessageProperties?.data) {\n      let { message, localDateSent } = sendMessageProperties.data.addMessage;\n      dispatchMessage({\n        type: SendStatus.SENT,\n        payload: { ...message, localDateSent, sender: message.from.id },\n      });\n    }\n\n    if (sendMessageProperties?.error) {\n      console.error(\"ERROR HAS OCCURED\");\n    }\n  }, [sendMessageProperties.data, sendMessageProperties?.error]);\n\n  useEffect(() => {\n    if (getCurrentUsersOnLobby?.data) {\n      let { data } = getCurrentUsersOnLobby.data.getCurrentUsersOnLobby;\n      setCurrentLobbyUsers(data.map((value) => value.username));\n    }\n  }, [getCurrentUsersOnLobby.data]);\n\n  useEffect(() => {\n    // todo add types\n    if (newMessageSub?.data?.messageAdded)\n      dispatchMessage({\n        type: \"NEW_MESSAGE\",\n        payload: newMessageSub.data.messageAdded.messages.map((value: any) => ({\n          ...value,\n          sender: value.from.id,\n          senderUsername: value.from.username,\n          date: new Date(String(value.date)),\n          sendType: 1,\n        })),\n      });\n  }, [newMessageSub]);\n\n  useEffect(() => {\n    if (userListChangedSub.data?.userListChanged) {\n      let { data } = userListChangedSub.data.userListChanged;\n      let dataLobbyUsers = data.map((value) => value.username);\n      setCurrentLobbyUsers(dataLobbyUsers);\n      let newUser = currentLobbyUsers.filter((user) => {\n        return dataLobbyUsers.includes(user);\n      });\n      // compare data and current lobby and\n      dispatchMessage({\n        type: \"NEW_MESSAGE\",\n        payload: [\n          {\n            message: `Hey`,\n            sender: \"Admin\",\n            to: \"\",\n            sendType: -1,\n          },\n        ],\n      });\n    }\n  }, [userListChangedSub]);\n\n  useEffect(() => {\n    if (usernameChangedSub?.data?.usernameChanged) {\n      dispatchMessage({\n        type: \"USERNAME_CHANGED\",\n        payload: usernameChangedSub.data.usernameChanged.data,\n      });\n    }\n  }, [usernameChangedSub.data]);\n\n  return (\n    <Box sx={chatterContainer}>\n      <MessageBar\n        {...props}\n        setShowLobbyUsers={setShowLobbyUsers}\n        showLobbyUsers={showLobbyUsers}\n      />\n      {showLobbyUsers ? (\n        <UserList users={currentLobbyUsers} />\n      ) : (\n        <Messages messages={messages}>\n          <div ref={bottomDivRef} />\n        </Messages>\n      )}\n      <Divider></Divider>\n      <Sender handleSendMessage={handleSendMessage}></Sender>\n    </Box>\n  );\n}\n\nexport default Chatter;\n"],"mappings":";;;AAAA,SAGEA,WAHF,EAIEC,QAJF,EAKEC,eALF,QAMO,gBANP;AAOA,SAASC,OAAT,QAAiC,eAAjC;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,UAAhC,EAA4CC,MAA5C,EAAoDC,QAApD,QAAoE,OAApE;AACA,SAASC,SAAT,QAA0B,WAA1B;AACA,SACEC,uBADF,EAEEC,qBAFF,EAGEC,0BAHF,EAIEC,YAJF,EAKEC,6BALF,EAMEC,8BANF,QAOO,uBAPP;AAYA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,QAAP,MAAqB,YAArB;;;AA4BA,SAASC,kBAAT,CACEC,KADF,EAEEC,MAFF,EAGa;EACX,IAAIC,QAAQ,GAAGF,KAAf;;EACA,QAAQC,MAAM,CAACE,IAAf;IACE,KAAK,WAAL;MACE,OAAOF,MAAM,CAACG,OAAP,CAAeC,GAAf,CAAoBC,OAAD,IAA2B;QACnD,OAAO;UACLC,IAAI,EAAE,IAAIC,IAAJ,CAAS,CAACF,OAAO,CAACC,IAAlB,CADD;UAELD,OAAO,EAAEA,OAAO,CAACA,OAFZ;UAGLG,MAAM,EAAEH,OAAO,CAACI,IAAR,CAAaC,EAHhB;UAILC,cAAc,EAAEN,OAAO,CAACI,IAAR,CAAaG,QAJxB;UAKLC,EAAE,EAAE,OALC;UAMLC,UAAU,EAAErB,UAAU,CAACsB,IANlB;UAOLC,QAAQ,EAAE;QAPL,CAAP;MASD,CAVM,CAAP;;IAWF,KAAKvB,UAAU,CAACwB,MAAhB;MACE,OAAO,EAAP;;IACF,KAAKxB,UAAU,CAACyB,OAAhB;MAAyB;QACvB,IAAI;UAAEL,EAAF;UAAML,MAAN;UAAcH,OAAd;UAAuBc;QAAvB,IAAyCnB,MAAM,CAACG,OAApD;QACAF,QAAQ,CAACmB,IAAT,CAAcpB,MAAM,CAACG,OAArB;QACAH,MAAM,CAACG,OAAP,CAAekB,QAAf,CAAwB;UACtBC,SAAS,EAAE;YACTC,eAAe,EAAE;cACfV,EADe;cAEfJ,IAAI,EAAED,MAFS;cAGfH,OAHe;cAIfc;YAJe;UADR;QADW,CAAxB;QAUA,OAAO,CAAC,GAAGlB,QAAJ,CAAP;MACD;;IACD,KAAKR,UAAU,CAACsB,IAAhB;MAAsB;QACpB,IAAI;UAAEI,aAAF;UAAiBX;QAAjB,IAA4BR,MAAM,CAACG,OAAvC;QACA,IAAIqB,aAAa,GAAGvB,QAAQ,CAACwB,MAAT,CACjBpB,OAAD,IACEA,OAAO,CAACc,aAAR,KAA0BA,aAA1B,IAA2Cd,OAAO,CAACG,MAAR,KAAmBA,MAF9C,CAApB;QAIAgB,aAAa,CAAC,CAAD,CAAb,CAAiBV,UAAjB,GAA8BrB,UAAU,CAACsB,IAAzC;QACA,OAAO,CAAC,GAAGd,QAAJ,CAAP;MACD;;IACD,KAAK,aAAL;MAAoB;QAClB;QACA,OAAO,CAAC,GAAGA,QAAJ,EAAc,GAAGD,MAAM,CAACG,OAAxB,CAAP;MACD;;IACD,KAAK,kBAAL;MAAyB;QACvB,OAAOF,QAAQ,CAACG,GAAT,CAAcC,OAAD,IAAsB;UACxC,IAAIA,OAAO,CAACG,MAAR,KAAmBR,MAAM,CAACG,OAAP,CAAeO,EAAtC,EACE,OAAO,EACL,GAAGL,OADE;YAELM,cAAc,EAAEX,MAAM,CAACG,OAAP,CAAeS;UAF1B,CAAP;UAIF,OAAOP,OAAP;QACD,CAPM,CAAP;MAQD;;IACD;MACE,MAAM,IAAIqB,KAAJ,EAAN;EAtDJ;AAwDD;;AAED,SAASC,OAAT,CAAiBC,KAAjB,EAAsC;EAAA;;EACpC,MAAMC,WAAW,GAAGhD,UAAU,CAACK,SAAD,CAA9B;EACA,MAAM4C,YAAY,GAAG9C,MAAM,CAAiB,IAAjB,CAA3B;EACA,MAAM+C,KAAK,GAAGnD,QAAQ,EAAtB,CAHoC,CAIpC;;EACA,MAAMoD,gBAAuC,GAAGxD,QAAQ,CACtDY,qBADsD,EAEtD;IAAEkC,SAAS,EAAE;MAAEW,OAAO,EAAEJ,WAAW,CAACI;IAAvB;EAAb,CAFsD,CAAxD;EAKA,MAAMC,sBASL,GAAG1D,QAAQ,CAACW,uBAAD,EAA0B;IACpCmC,SAAS,EAAE;MAAEW,OAAO,EAAEJ,WAAW,CAACI;IAAvB;EADyB,CAA1B,CATZ,CAVoC,CAuBpC;;EACA,MAAM,CAACE,WAAD,EAAcC,qBAAd,IAAuC7D,WAAW,CAACe,YAAD,CAAxD;EAEA,MAAM+C,aAGL,GAAG5D,eAAe,CAACY,0BAAD,EAA6B;IAC9CiC,SAAS,EAAE;MACTW,OAAO,EAAEJ,WAAW,CAACI,OADZ;MAETK,MAAM,EAAET,WAAW,CAACS;IAFX;EADmC,CAA7B,CAHnB;EAUA,MAAMC,kBAOL,GAAG9D,eAAe,CAACe,8BAAD,EAAiC;IAClD8B,SAAS,EAAE;MACTW,OAAO,EAAEJ,WAAW,CAACI;IADZ;EADuC,CAAjC,CAPnB;EAaA,MAAMO,kBAKL,GAAG/D,eAAe,CAACc,6BAAD,EAAgC;IACjD+B,SAAS,EAAE;MACTW,OAAO,EAAEJ,WAAW,CAACI,OADZ;MAETK,MAAM,EAAET,WAAW,CAACS;IAFX;EADsC,CAAhC,CALnB;EAYA,MAAMG,gBAAyB,GAAG;IAChCC,MAAM,EAAE,MADwB;IAEhCC,OAAO,EAAE,MAFuB;IAGhCC,aAAa,EAAE,QAHiB;IAIhCC,OAAO,EAAEd,KAAK,CAACe,IAAN,CAAWC,OAJY;IAKhCC,QAAQ,EAAE;EALsB,CAAlC;EAQA,IAAIC,eAA0B,GAAG,EAAjC;EAEA,MAAM,CAAChD,QAAD,EAAWiD,eAAX,IAA8BnE,UAAU,CAC5Ce,kBAD4C,EAE5CmD,eAF4C,CAA9C;EAKA,MAAM,CAACE,WAAD,EAAcC,cAAd,IAAgCnE,QAAQ,CAAU,KAAV,CAA9C;EACA,MAAM,CAACoE,cAAD,EAAiBC,iBAAjB,IAAsCrE,QAAQ,CAAU,KAAV,CAApD;EACA,MAAM,CAACsE,iBAAD,EAAoBC,oBAApB,IAA4CvE,QAAQ,CAAW,EAAX,CAA1D;;EAEA,MAAMwE,iBAAiB,GAAIpD,OAAD,IAAqB;IAC7C,MAAMqD,kBAA0B,GAAGzD,QAAQ,CAAC0D,MAA5C;IAEAT,eAAe,CAAC;MACdhD,IAAI,EAAET,UAAU,CAACyB,OADH;MAEdf,OAAO,EAAE;QACPE,OAAO,EAAEA,OADF;QAEPG,MAAM,EAAEqB,WAAW,CAACS,MAFb;QAGP3B,cAAc,EAAEkB,WAAW,CAACjB,QAHrB;QAIPC,EAAE,EAAEgB,WAAW,CAACI,OAJT;QAKPnB,UAAU,EAAErB,UAAU,CAACyB,OALhB;QAMP0C,KAAK,EAAEF,kBANA;QAOPvC,aAAa,EAAE,IAAIZ,IAAJ,GAAWsD,OAAX,KAAuB,EAP/B;QAQPxC,QAAQ,EAAEc;MARH;IAFK,CAAD,CAAf;EAaD,CAhBD;;EAkBArD,SAAS,CAAC,MAAM;IAAA;;IACd,IAAI,CAAC8C,KAAK,CAACkC,UAAP,IAAqB,CAACT,cAA1B,EACEvB,YAAY,SAAZ,IAAAA,YAAY,WAAZ,qCAAAA,YAAY,CAAEiC,OAAd,gFAAuBC,cAAvB;EACH,CAHQ,EAGN,CAAC/D,QAAD,EAAWoD,cAAX,EAA2BzB,KAAK,CAACkC,UAAjC,CAHM,CAAT;EAKAhF,SAAS,CAAC,MAAM;IAAA;;IACd,IAAI,CAACqE,WAAD,6BAAgBnB,gBAAgB,CAACiC,IAAjC,4EAAgB,sBAAuBC,kBAAvC,mDAAgB,uBAA2CC,OAA/D,EAAwE;MACtEf,cAAc,CAAC,IAAD,CAAd;MACAF,eAAe,CAAC;QACdhD,IAAI,EAAE,WADQ;QAEdC,OAAO,EAAE6B,gBAAgB,CAACiC,IAAjB,CAAsBC,kBAAtB,CAAyCD;MAFpC,CAAD,CAAf;IAID;EACF,CARQ,EAQN,CAACd,WAAD,EAAcnB,gBAAgB,CAACiC,IAA/B,CARM,CAAT;EAUAnF,SAAS,CAAC,MAAM;IACd,IAAIsD,qBAAJ,aAAIA,qBAAJ,eAAIA,qBAAqB,CAAE6B,IAA3B,EAAiC;MAC/B,IAAI;QAAE5D,OAAF;QAAWc;MAAX,IAA6BiB,qBAAqB,CAAC6B,IAAtB,CAA2BG,UAA5D;MACAlB,eAAe,CAAC;QACdhD,IAAI,EAAET,UAAU,CAACsB,IADH;QAEdZ,OAAO,EAAE,EAAE,GAAGE,OAAL;UAAcc,aAAd;UAA6BX,MAAM,EAAEH,OAAO,CAACI,IAAR,CAAaC;QAAlD;MAFK,CAAD,CAAf;IAID;;IAED,IAAI0B,qBAAJ,aAAIA,qBAAJ,eAAIA,qBAAqB,CAAEiC,KAA3B,EAAkC;MAChCC,OAAO,CAACD,KAAR,CAAc,mBAAd;IACD;EACF,CAZQ,EAYN,CAACjC,qBAAqB,CAAC6B,IAAvB,EAA6B7B,qBAA7B,aAA6BA,qBAA7B,uBAA6BA,qBAAqB,CAAEiC,KAApD,CAZM,CAAT;EAcAvF,SAAS,CAAC,MAAM;IACd,IAAIoD,sBAAJ,aAAIA,sBAAJ,eAAIA,sBAAsB,CAAE+B,IAA5B,EAAkC;MAChC,IAAI;QAAEA;MAAF,IAAW/B,sBAAsB,CAAC+B,IAAvB,CAA4B/B,sBAA3C;MACAsB,oBAAoB,CAACS,IAAI,CAAC7D,GAAL,CAAUmE,KAAD,IAAWA,KAAK,CAAC3D,QAA1B,CAAD,CAApB;IACD;EACF,CALQ,EAKN,CAACsB,sBAAsB,CAAC+B,IAAxB,CALM,CAAT;EAOAnF,SAAS,CAAC,MAAM;IAAA;;IACd;IACA,IAAIuD,aAAJ,aAAIA,aAAJ,sCAAIA,aAAa,CAAE4B,IAAnB,gDAAI,oBAAqBO,YAAzB,EACEtB,eAAe,CAAC;MACdhD,IAAI,EAAE,aADQ;MAEdC,OAAO,EAAEkC,aAAa,CAAC4B,IAAd,CAAmBO,YAAnB,CAAgCvE,QAAhC,CAAyCG,GAAzC,CAA8CmE,KAAD,KAAiB,EACrE,GAAGA,KADkE;QAErE/D,MAAM,EAAE+D,KAAK,CAAC9D,IAAN,CAAWC,EAFkD;QAGrEC,cAAc,EAAE4D,KAAK,CAAC9D,IAAN,CAAWG,QAH0C;QAIrEN,IAAI,EAAE,IAAIC,IAAJ,CAASkE,MAAM,CAACF,KAAK,CAACjE,IAAP,CAAf,CAJ+D;QAKrEU,QAAQ,EAAE;MAL2D,CAAjB,CAA7C;IAFK,CAAD,CAAf;EAUH,CAbQ,EAaN,CAACqB,aAAD,CAbM,CAAT;EAeAvD,SAAS,CAAC,MAAM;IAAA;;IACd,6BAAIyD,kBAAkB,CAAC0B,IAAvB,kDAAI,sBAAyBS,eAA7B,EAA8C;MAC5C,IAAI;QAAET;MAAF,IAAW1B,kBAAkB,CAAC0B,IAAnB,CAAwBS,eAAvC;MACA,IAAIC,cAAc,GAAGV,IAAI,CAAC7D,GAAL,CAAUmE,KAAD,IAAWA,KAAK,CAAC3D,QAA1B,CAArB;MACA4C,oBAAoB,CAACmB,cAAD,CAApB;MACA,IAAIC,OAAO,GAAGrB,iBAAiB,CAAC9B,MAAlB,CAA0BoD,IAAD,IAAU;QAC/C,OAAOF,cAAc,CAACG,QAAf,CAAwBD,IAAxB,CAAP;MACD,CAFa,CAAd,CAJ4C,CAO5C;;MACA3B,eAAe,CAAC;QACdhD,IAAI,EAAE,aADQ;QAEdC,OAAO,EAAE,CACP;UACEE,OAAO,EAAG,KADZ;UAEEG,MAAM,EAAE,OAFV;UAGEK,EAAE,EAAE,EAHN;UAIEG,QAAQ,EAAE,CAAC;QAJb,CADO;MAFK,CAAD,CAAf;IAWD;EACF,CArBQ,EAqBN,CAACuB,kBAAD,CArBM,CAAT;EAuBAzD,SAAS,CAAC,MAAM;IAAA;;IACd,IAAI0D,kBAAJ,aAAIA,kBAAJ,wCAAIA,kBAAkB,CAAEyB,IAAxB,kDAAI,sBAA0Bc,eAA9B,EAA+C;MAC7C7B,eAAe,CAAC;QACdhD,IAAI,EAAE,kBADQ;QAEdC,OAAO,EAAEqC,kBAAkB,CAACyB,IAAnB,CAAwBc,eAAxB,CAAwCd;MAFnC,CAAD,CAAf;IAID;EACF,CAPQ,EAON,CAACzB,kBAAkB,CAACyB,IAApB,CAPM,CAAT;EASA,oBACE,QAAC,GAAD;IAAK,EAAE,EAAExB,gBAAT;IAAA,wBACE,QAAC,UAAD,OACMb,KADN;MAEE,iBAAiB,EAAE0B,iBAFrB;MAGE,cAAc,EAAED;IAHlB;MAAA;MAAA;MAAA;IAAA,QADF,EAMGA,cAAc,gBACb,QAAC,QAAD;MAAU,KAAK,EAAEE;IAAjB;MAAA;MAAA;MAAA;IAAA,QADa,gBAGb,QAAC,QAAD;MAAU,QAAQ,EAAEtD,QAApB;MAAA,uBACE;QAAK,GAAG,EAAE6B;MAAV;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QATJ,eAaE,QAAC,OAAD;MAAA;MAAA;MAAA;IAAA,QAbF,eAcE,QAAC,MAAD;MAAQ,iBAAiB,EAAE2B;IAA3B;MAAA;MAAA;MAAA;IAAA,QAdF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAkBD;;GAvMQ9B,O;UAGO/C,Q,EAEkCJ,Q,EAc5CA,Q,EAKyCD,W,EAKzCE,e,EAcAA,e,EAWAA,e;;;KAtDGkD,O;AAyMT,eAAeA,OAAf"},"metadata":{},"sourceType":"module"}