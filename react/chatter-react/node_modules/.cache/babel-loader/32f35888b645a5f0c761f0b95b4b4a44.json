{"ast":null,"code":"var _jsxFileName = \"/home/xeg/dev/chatter-web/frontend/react/chatter-react/src/components/Chatter/Chatter.tsx\",\n    _s = $RefreshSig$();\n\nimport { useMutation, useQuery, useSubscription } from \"@apollo/client\";\nimport { Divider } from \"@mui/material\";\nimport Box from \"@mui/material/Box\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { useContext, useEffect, useReducer, useRef, useState } from \"react\";\nimport { UsrContxt } from \"../../App\";\nimport { GET_CURR_USERS_ON_LOBBY, GET_MESSAGES_ON_LOBBY, MESSAGE_ADDED_SUBSCRIPTION, SEND_MESSAGE, USERNAME_CHANGED_SUBSCRIPTION, USER_LIST_CHANGED_SUBSCRIPTION } from \"../../queries/Chatter\";\nimport { VIDEO_STATUS_SUBSCRIPTION } from \"../../queries/Video\";\nimport MessageBar from \"./MessageBar\";\nimport Messages from \"./Messages\";\nimport Sender from \"./Sender\";\nimport UserList from \"./UserList\";\nimport SendStatus from \"./interface/SendStatus\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction sendMessageReducer(state, action) {\n  let messages = state;\n\n  switch (action.type) {\n    case \"FETCH_ALL\":\n      return action.payload.map(message => {\n        return {\n          date: new Date(+message.date),\n          message: message.message,\n          sender: message.from.id,\n          senderUsername: message.from.username,\n          to: \"Lobby\",\n          sendStatus: SendStatus.SENT,\n          sendType: 1\n        };\n      });\n\n    case SendStatus.FAILED:\n      return {};\n\n    case SendStatus.SENDING:\n      {\n        let {\n          to,\n          sender,\n          message,\n          localDateSent\n        } = action.payload;\n        messages.push(action.payload);\n        action.payload.callback({\n          variables: {\n            addMessageInput: {\n              to,\n              from: sender,\n              message,\n              localDateSent\n            }\n          }\n        });\n        return [...messages];\n      }\n\n    case SendStatus.SENT:\n      {\n        let {\n          localDateSent,\n          sender\n        } = action.payload;\n        let targetMessage = messages.filter(message => message.localDateSent === localDateSent && message.sender === sender);\n        targetMessage[0].sendStatus = SendStatus.SENT;\n        return [...messages];\n      }\n\n    case \"NEW_MESSAGE\":\n      {\n        // todo sort\n        return [...messages, ...action.payload];\n      }\n\n    case \"USERNAME_CHANGED\":\n      {\n        return messages.map(message => {\n          if (message.sender === action.payload.id) return { ...message,\n            senderUsername: action.payload.username\n          };\n          return message;\n        });\n      }\n\n    default:\n      throw new Error();\n  }\n}\n\nfunction Chatter(props) {\n  _s();\n\n  const userContext = useContext(UsrContxt);\n  const bottomDivRef = useRef(null);\n  const theme = useTheme(); // TODO QUERY RESULT ADD PROPER TYPES\n\n  const existingMessages = useQuery(GET_MESSAGES_ON_LOBBY, {\n    variables: {\n      lobbyId: userContext.lobbyId\n    }\n  });\n  const getCurrentUsersOnLobby = useQuery(GET_CURR_USERS_ON_LOBBY, {\n    variables: {\n      lobbyId: userContext.lobbyId\n    }\n  }); // unless yung state ng message is contained to itself\n\n  const [sendMessage, sendMessageProperties] = useMutation(SEND_MESSAGE);\n  const newMessageSub = useSubscription(MESSAGE_ADDED_SUBSCRIPTION, {\n    variables: {\n      lobbyId: userContext.lobbyId,\n      userId: userContext.userId\n    }\n  });\n  const userListChangedSub = useSubscription(USER_LIST_CHANGED_SUBSCRIPTION, {\n    variables: {\n      lobbyId: userContext.lobbyId\n    }\n  });\n  const usernameChangedSub = useSubscription(USERNAME_CHANGED_SUBSCRIPTION, {\n    variables: {\n      lobbyId: userContext.lobbyId,\n      userId: userContext.userId\n    }\n  });\n  const videoChanges = useSubscription(VIDEO_STATUS_SUBSCRIPTION, {\n    variables: {\n      lobbyId: userContext.lobbyId,\n      userId: userContext.userId\n    }\n  });\n  const chatterContainer = {\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    bgcolor: theme.chat.bgColor,\n    minWidth: \"inherit\"\n  };\n  let initialMessages = [];\n  const [messages, dispatchMessage] = useReducer(sendMessageReducer, initialMessages);\n  const [initializedMessage, setInitializedMessage] = useState(false);\n  const [initializedLobbyList, setInitializedLobbyList] = useState(false);\n  const [showLobbyUsers, setShowLobbyUsers] = useState(false);\n  const [currentLobbyUsers, setCurrentLobbyUsers] = useState([]);\n\n  const handleSendMessage = message => {\n    const messageStatusIndex = messages.length;\n    dispatchMessage({\n      type: SendStatus.SENDING,\n      payload: {\n        message: message,\n        sender: userContext.userId,\n        senderUsername: userContext.username,\n        to: userContext.lobbyId,\n        sendStatus: SendStatus.SENDING,\n        index: messageStatusIndex,\n        localDateSent: new Date().getTime() + \"\",\n        callback: sendMessage,\n        sendType: 1\n      }\n    });\n  };\n\n  useEffect(() => {\n    if (!props.chatHidden && !showLobbyUsers) {\n      // wait for the transition to end\n      setTimeout(() => {\n        var _bottomDivRef$current;\n\n        bottomDivRef === null || bottomDivRef === void 0 ? void 0 : (_bottomDivRef$current = bottomDivRef.current) === null || _bottomDivRef$current === void 0 ? void 0 : _bottomDivRef$current.scrollIntoView();\n      }, 750);\n    }\n  }, [messages, showLobbyUsers, props.chatHidden]);\n  useEffect(() => {\n    var _existingMessages$dat, _existingMessages$dat2;\n\n    if (!initializedMessage && (_existingMessages$dat = existingMessages.data) !== null && _existingMessages$dat !== void 0 && (_existingMessages$dat2 = _existingMessages$dat.getMessagesOnLobby) !== null && _existingMessages$dat2 !== void 0 && _existingMessages$dat2.success) {\n      setInitializedMessage(true);\n      dispatchMessage({\n        type: \"FETCH_ALL\",\n        payload: existingMessages.data.getMessagesOnLobby.data\n      });\n    }\n  }, [initializedMessage, existingMessages.data]);\n  useEffect(() => {\n    if (sendMessageProperties !== null && sendMessageProperties !== void 0 && sendMessageProperties.data) {\n      let {\n        message,\n        localDateSent\n      } = sendMessageProperties.data.addMessage;\n      dispatchMessage({\n        type: SendStatus.SENT,\n        payload: { ...message,\n          localDateSent,\n          sender: message.from.id\n        }\n      });\n    }\n\n    if (sendMessageProperties !== null && sendMessageProperties !== void 0 && sendMessageProperties.error) {\n      console.error(\"ERROR HAS OCCURED\");\n    }\n  }, [sendMessageProperties.data, sendMessageProperties === null || sendMessageProperties === void 0 ? void 0 : sendMessageProperties.error]);\n  useEffect(() => {\n    if (getCurrentUsersOnLobby !== null && getCurrentUsersOnLobby !== void 0 && getCurrentUsersOnLobby.data) {\n      let {\n        data\n      } = getCurrentUsersOnLobby.data.getCurrentUsersOnLobby;\n      setCurrentLobbyUsers(data);\n    }\n  }, [getCurrentUsersOnLobby.data]);\n  useEffect(() => {\n    var _newMessageSub$data;\n\n    // todo add types\n    if (newMessageSub !== null && newMessageSub !== void 0 && (_newMessageSub$data = newMessageSub.data) !== null && _newMessageSub$data !== void 0 && _newMessageSub$data.messageAdded) dispatchMessage({\n      type: \"NEW_MESSAGE\",\n      payload: newMessageSub.data.messageAdded.messages.map(value => ({ ...value,\n        sender: value.from.id,\n        senderUsername: value.from.username,\n        date: new Date(String(value.date)),\n        sendType: 1\n      }))\n    });\n  }, [newMessageSub]);\n  useEffect(() => {\n    var _userListChangedSub$d;\n\n    if ((_userListChangedSub$d = userListChangedSub.data) !== null && _userListChangedSub$d !== void 0 && _userListChangedSub$d.userListChanged) {\n      let {\n        data\n      } = userListChangedSub.data.userListChanged;\n\n      if (!initializedLobbyList) {\n        setInitializedLobbyList(true);\n        setCurrentLobbyUsers(data);\n        return;\n      }\n\n      let newUser = data.filter(lobbyUser => !currentLobbyUsers.some(cLobbyUser => lobbyUser.id == cLobbyUser.id));\n      let userLeft = currentLobbyUsers.filter(cLobbyUser => !data.some(dataUser => dataUser.id == cLobbyUser.id));\n      setCurrentLobbyUsers(data);\n\n      if (newUser[0] && newUser[0].username !== userContext.username) {\n        dispatchMessageEnteredLobby(newUser[0].username);\n      } else if (userLeft[0] && userLeft[0].username !== userContext.username) {\n        dispatchMessageLeftLobby(userLeft[0].username);\n      }\n    }\n  }, [userListChangedSub]);\n  useEffect(() => {\n    var _videoChanges$data;\n\n    if ((_videoChanges$data = videoChanges.data) !== null && _videoChanges$data !== void 0 && _videoChanges$data.videoStatusChanged) {\n      var _videoChanges$data2;\n\n      let {\n        username,\n        currTime,\n        status,\n        url\n      } = (_videoChanges$data2 = videoChanges.data) === null || _videoChanges$data2 === void 0 ? void 0 : _videoChanges$data2.videoStatusChanged.data;\n      let payload = {\n        message: \"\",\n        sender: \"Admin\",\n        to: \"Everyone\",\n        sendType: -1\n      };\n\n      if (url) {\n        payload.message = `${username} has changed the video`;\n      }\n\n      if (status == 1) {\n        payload.message = `${username} has played the video`;\n      }\n\n      if (status == 2) {\n        payload.message = `${username} has paused the video`;\n      }\n\n      if (status == 3) {\n        payload.message = `${username} is buffering...`;\n      }\n    }\n  }, [videoChanges]);\n\n  const dispatchMessageEnteredLobby = user => {\n    dispatchMessage({\n      type: \"NEW_MESSAGE\",\n      payload: [{\n        message: `${user} has entered the lobby.`,\n        sender: \"Admin\",\n        to: \"Everyone\",\n        sendType: -1\n      }]\n    });\n  };\n\n  const dispatchMessageLeftLobby = user => {\n    dispatchMessage({\n      type: \"NEW_MESSAGE\",\n      payload: [{\n        message: `${user} has left the lobby.`,\n        sender: \"Admin\",\n        to: \"Everyone\",\n        sendType: -1\n      }]\n    });\n  };\n\n  useEffect(() => {\n    var _usernameChangedSub$d;\n\n    if (usernameChangedSub !== null && usernameChangedSub !== void 0 && (_usernameChangedSub$d = usernameChangedSub.data) !== null && _usernameChangedSub$d !== void 0 && _usernameChangedSub$d.usernameChanged) {\n      var _usernameChangedSub$d2;\n\n      const {\n        id,\n        username\n      } = (_usernameChangedSub$d2 = usernameChangedSub.data) === null || _usernameChangedSub$d2 === void 0 ? void 0 : _usernameChangedSub$d2.usernameChanged.data; // modify messages to account change of name\n\n      dispatchMessage({\n        type: \"USERNAME_CHANGED\",\n        payload: usernameChangedSub.data.usernameChanged.data\n      }); // modify user with the new username\n\n      setCurrentLobbyUsers(currentUsers => currentUsers.map(user => user.id === id ? { ...user,\n        username: username\n      } : user));\n    }\n  }, [usernameChangedSub.data]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: chatterContainer,\n    children: [/*#__PURE__*/_jsxDEV(MessageBar, { ...props,\n      setShowLobbyUsers: setShowLobbyUsers,\n      showLobbyUsers: showLobbyUsers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 7\n    }, this), showLobbyUsers ? /*#__PURE__*/_jsxDEV(UserList, {\n      users: currentLobbyUsers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Messages, {\n      messages: messages,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: bottomDivRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Sender, {\n      handleSendMessage: handleSendMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 392,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Chatter, \"oxljZ5ItcjxSWl+LImlrGtsMgU8=\", false, function () {\n  return [useTheme, useQuery, useQuery, useMutation, useSubscription, useSubscription, useSubscription, useSubscription];\n});\n\n_c = Chatter;\nexport default Chatter;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chatter\");","map":{"version":3,"names":["useMutation","useQuery","useSubscription","Divider","Box","useTheme","useContext","useEffect","useReducer","useRef","useState","UsrContxt","GET_CURR_USERS_ON_LOBBY","GET_MESSAGES_ON_LOBBY","MESSAGE_ADDED_SUBSCRIPTION","SEND_MESSAGE","USERNAME_CHANGED_SUBSCRIPTION","USER_LIST_CHANGED_SUBSCRIPTION","VIDEO_STATUS_SUBSCRIPTION","MessageBar","Messages","Sender","UserList","SendStatus","sendMessageReducer","state","action","messages","type","payload","map","message","date","Date","sender","from","id","senderUsername","username","to","sendStatus","SENT","sendType","FAILED","SENDING","localDateSent","push","callback","variables","addMessageInput","targetMessage","filter","Error","Chatter","props","userContext","bottomDivRef","theme","existingMessages","lobbyId","getCurrentUsersOnLobby","sendMessage","sendMessageProperties","newMessageSub","userId","userListChangedSub","usernameChangedSub","videoChanges","chatterContainer","height","display","flexDirection","bgcolor","chat","bgColor","minWidth","initialMessages","dispatchMessage","initializedMessage","setInitializedMessage","initializedLobbyList","setInitializedLobbyList","showLobbyUsers","setShowLobbyUsers","currentLobbyUsers","setCurrentLobbyUsers","handleSendMessage","messageStatusIndex","length","index","getTime","chatHidden","setTimeout","current","scrollIntoView","data","getMessagesOnLobby","success","addMessage","error","console","messageAdded","value","String","userListChanged","newUser","lobbyUser","some","cLobbyUser","userLeft","dataUser","dispatchMessageEnteredLobby","dispatchMessageLeftLobby","videoStatusChanged","currTime","status","url","user","usernameChanged","currentUsers"],"sources":["/home/xeg/dev/chatter-web/frontend/react/chatter-react/src/components/Chatter/Chatter.tsx"],"sourcesContent":["import {\n  QueryResult,\n  SubscriptionResult,\n  useMutation,\n  useQuery,\n  useSubscription,\n} from \"@apollo/client\";\nimport { Divider, SxProps } from \"@mui/material\";\nimport Box from \"@mui/material/Box\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { useContext, useEffect, useReducer, useRef, useState } from \"react\";\nimport { UsrContxt } from \"../../App\";\nimport {\n  GET_CURR_USERS_ON_LOBBY,\n  GET_MESSAGES_ON_LOBBY,\n  MESSAGE_ADDED_SUBSCRIPTION,\n  SEND_MESSAGE,\n  USERNAME_CHANGED_SUBSCRIPTION,\n  USER_LIST_CHANGED_SUBSCRIPTION,\n} from \"../../queries/Chatter\";\nimport { VIDEO_STATUS_SUBSCRIPTION } from \"../../queries/Video\";\nimport MessageBar from \"./MessageBar\";\nimport Messages from \"./Messages\";\nimport Sender from \"./Sender\";\nimport UserList from \"./UserList\";\nimport Message from \"./interface/Message\";\nimport SendStatus from \"./interface/SendStatus\";\nimport GenericResponse from \"./interface/response/GenericResponse\";\nimport NewMessageSubResponse from \"./interface/response/NewMessageSubResponse\";\nimport UsernameChangedSubResponse from \"./interface/response/UsernameChangedSubResponse\";\nimport VideoStatusTopicResponse from \"./interface/response/VideoStatusTopicResponse\";\ninterface LobbyIdProps {\n  lobbyId: string;\n}\n\ninterface UserIdProps {\n  userIdProps: string;\n}\n\ninterface ChatterProps {\n  chatHidden: boolean;\n  setChatHidden: Function;\n}\n\ntype MESSAGEACTIONTYPE =\n  | { type: \"FETCH_ALL\"; payload: any } // todo change proper types\n  | { type: SendStatus.FAILED; payload: Message & { localDateSent: string } }\n  | {\n      type: SendStatus.SENDING;\n      payload: Message & { index: number; callback: Function };\n    }\n  | { type: SendStatus.SENT; payload: Message & { localDateSent: string } }\n  | { type: \"NEW_MESSAGE\"; payload: Message[] }\n  | {\n      type: \"USERNAME_CHANGED\";\n      payload: { username: string; id: string };\n    };\n\nfunction sendMessageReducer(\n  state: Message[],\n  action: MESSAGEACTIONTYPE\n): Message[] {\n  let messages = state;\n  switch (action.type) {\n    case \"FETCH_ALL\":\n      return action.payload.map((message: any): Message => {\n        return {\n          date: new Date(+message.date),\n          message: message.message,\n          sender: message.from.id,\n          senderUsername: message.from.username,\n          to: \"Lobby\",\n          sendStatus: SendStatus.SENT,\n          sendType: 1,\n        };\n      });\n    case SendStatus.FAILED:\n      return {} as Message[];\n    case SendStatus.SENDING: {\n      let { to, sender, message, localDateSent } = action.payload;\n      messages.push(action.payload);\n      action.payload.callback({\n        variables: {\n          addMessageInput: {\n            to,\n            from: sender,\n            message,\n            localDateSent,\n          },\n        },\n      });\n      return [...messages];\n    }\n    case SendStatus.SENT: {\n      let { localDateSent, sender } = action.payload;\n      let targetMessage = messages.filter(\n        (message) =>\n          message.localDateSent === localDateSent && message.sender === sender\n      );\n      targetMessage[0].sendStatus = SendStatus.SENT;\n      return [...messages];\n    }\n    case \"NEW_MESSAGE\": {\n      // todo sort\n      return [...messages, ...action.payload];\n    }\n    case \"USERNAME_CHANGED\": {\n      return messages.map((message: Message) => {\n        if (message.sender === action.payload.id)\n          return {\n            ...message,\n            senderUsername: action.payload.username,\n          };\n        return message;\n      });\n    }\n    default:\n      throw new Error();\n  }\n}\n\nfunction Chatter(props: ChatterProps) {\n  const userContext = useContext(UsrContxt);\n  const bottomDivRef = useRef<HTMLDivElement>(null);\n  const theme = useTheme();\n  // TODO QUERY RESULT ADD PROPER TYPES\n  const existingMessages: QueryResult<any, any> = useQuery(\n    GET_MESSAGES_ON_LOBBY,\n    { variables: { lobbyId: userContext.lobbyId } }\n  );\n\n  const getCurrentUsersOnLobby: QueryResult<\n    {\n      getCurrentUsersOnLobby: GenericResponse & {\n        data: Array<{ username: string; id: string }>;\n      };\n    },\n    {\n      lobbyId: string;\n    }\n  > = useQuery(GET_CURR_USERS_ON_LOBBY, {\n    variables: { lobbyId: userContext.lobbyId },\n  });\n\n  // unless yung state ng message is contained to itself\n  const [sendMessage, sendMessageProperties] = useMutation(SEND_MESSAGE);\n\n  const newMessageSub: SubscriptionResult<\n    { messageAdded: NewMessageSubResponse },\n    { lobbyId: LobbyIdProps; userId: UserIdProps }\n  > = useSubscription(MESSAGE_ADDED_SUBSCRIPTION, {\n    variables: {\n      lobbyId: userContext.lobbyId,\n      userId: userContext.userId,\n    },\n  });\n\n  const userListChangedSub: SubscriptionResult<\n    {\n      userListChanged: GenericResponse & {\n        data: Array<{ username: string; id: string }>;\n      };\n    },\n    { lobbyId: string }\n  > = useSubscription(USER_LIST_CHANGED_SUBSCRIPTION, {\n    variables: {\n      lobbyId: userContext.lobbyId,\n    },\n  });\n\n  const usernameChangedSub: SubscriptionResult<\n    {\n      usernameChanged: { data: UsernameChangedSubResponse };\n    },\n    { lobbyId: LobbyIdProps; userId: UserIdProps }\n  > = useSubscription(USERNAME_CHANGED_SUBSCRIPTION, {\n    variables: {\n      lobbyId: userContext.lobbyId,\n      userId: userContext.userId,\n    },\n  });\n\n  const videoChanges: SubscriptionResult<\n    { videoStatusChanged: VideoStatusTopicResponse },\n    { lobbyId: LobbyIdProps; userId: UserIdProps }\n  > = useSubscription(VIDEO_STATUS_SUBSCRIPTION, {\n    variables: {\n      lobbyId: userContext.lobbyId,\n      userId: userContext.userId,\n    },\n  });\n\n  const chatterContainer: SxProps = {\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    bgcolor: theme.chat.bgColor,\n    minWidth: \"inherit\",\n  };\n\n  let initialMessages: Message[] = [] as Message[];\n\n  const [messages, dispatchMessage] = useReducer(\n    sendMessageReducer,\n    initialMessages\n  );\n\n  const [initializedMessage, setInitializedMessage] = useState<boolean>(false);\n  const [initializedLobbyList, setInitializedLobbyList] =\n    useState<boolean>(false);\n  const [showLobbyUsers, setShowLobbyUsers] = useState<boolean>(false);\n  const [currentLobbyUsers, setCurrentLobbyUsers] = useState<\n    Array<{ username: string; id: string }>\n  >([]);\n\n  const handleSendMessage = (message: string) => {\n    const messageStatusIndex: number = messages.length;\n\n    dispatchMessage({\n      type: SendStatus.SENDING,\n      payload: {\n        message: message,\n        sender: userContext.userId,\n        senderUsername: userContext.username,\n        to: userContext.lobbyId,\n        sendStatus: SendStatus.SENDING,\n        index: messageStatusIndex,\n        localDateSent: new Date().getTime() + \"\",\n        callback: sendMessage,\n        sendType: 1,\n      },\n    });\n  };\n\n  useEffect(() => {\n    if (!props.chatHidden && !showLobbyUsers) {\n      // wait for the transition to end\n      setTimeout(() => {\n        bottomDivRef?.current?.scrollIntoView();\n      }, 750);\n    }\n  }, [messages, showLobbyUsers, props.chatHidden]);\n\n  useEffect(() => {\n    if (\n      !initializedMessage &&\n      existingMessages.data?.getMessagesOnLobby?.success\n    ) {\n      setInitializedMessage(true);\n      dispatchMessage({\n        type: \"FETCH_ALL\",\n        payload: existingMessages.data.getMessagesOnLobby.data,\n      });\n    }\n  }, [initializedMessage, existingMessages.data]);\n\n  useEffect(() => {\n    if (sendMessageProperties?.data) {\n      let { message, localDateSent } = sendMessageProperties.data.addMessage;\n      dispatchMessage({\n        type: SendStatus.SENT,\n        payload: { ...message, localDateSent, sender: message.from.id },\n      });\n    }\n\n    if (sendMessageProperties?.error) {\n      console.error(\"ERROR HAS OCCURED\");\n    }\n  }, [sendMessageProperties.data, sendMessageProperties?.error]);\n\n  useEffect(() => {\n    if (getCurrentUsersOnLobby?.data) {\n      let { data } = getCurrentUsersOnLobby.data.getCurrentUsersOnLobby;\n      setCurrentLobbyUsers(data);\n    }\n  }, [getCurrentUsersOnLobby.data]);\n\n  useEffect(() => {\n    // todo add types\n    if (newMessageSub?.data?.messageAdded)\n      dispatchMessage({\n        type: \"NEW_MESSAGE\",\n        payload: newMessageSub.data.messageAdded.messages.map((value: any) => ({\n          ...value,\n          sender: value.from.id,\n          senderUsername: value.from.username,\n          date: new Date(String(value.date)),\n          sendType: 1,\n        })),\n      });\n  }, [newMessageSub]);\n\n  useEffect(() => {\n    if (userListChangedSub.data?.userListChanged) {\n      let { data } = userListChangedSub.data.userListChanged;\n\n      if (!initializedLobbyList) {\n        setInitializedLobbyList(true);\n        setCurrentLobbyUsers(data);\n        return;\n      }\n\n      let newUser = data.filter(\n        (lobbyUser) =>\n          !currentLobbyUsers.some((cLobbyUser) => lobbyUser.id == cLobbyUser.id)\n      );\n      let userLeft = currentLobbyUsers.filter(\n        (cLobbyUser) => !data.some((dataUser) => dataUser.id == cLobbyUser.id)\n      );\n\n      setCurrentLobbyUsers(data);\n\n      if (newUser[0] && newUser[0].username !== userContext.username) {\n        dispatchMessageEnteredLobby(newUser[0].username);\n      } else if (userLeft[0] && userLeft[0].username !== userContext.username) {\n        dispatchMessageLeftLobby(userLeft[0].username);\n      }\n    }\n  }, [userListChangedSub]);\n\n  useEffect(() => {\n    if (videoChanges.data?.videoStatusChanged) {\n      let { username, currTime, status, url } =\n        videoChanges.data?.videoStatusChanged.data;\n      let payload = {\n        message: \"\",\n        sender: \"Admin\",\n        to: \"Everyone\",\n        sendType: -1,\n      };\n      if (url) {\n        payload.message = `${username} has changed the video`;\n      }\n      if (status == 1) {\n        payload.message = `${username} has played the video`;\n      }\n      if (status == 2) {\n        payload.message = `${username} has paused the video`;\n      }\n      if (status == 3) {\n        payload.message = `${username} is buffering...`;\n      }\n    }\n  }, [videoChanges]);\n\n  const dispatchMessageEnteredLobby = (user: string): void => {\n    dispatchMessage({\n      type: \"NEW_MESSAGE\",\n      payload: [\n        {\n          message: `${user} has entered the lobby.`,\n          sender: \"Admin\",\n          to: \"Everyone\",\n          sendType: -1,\n        },\n      ],\n    });\n  };\n\n  const dispatchMessageLeftLobby = (user: string): void => {\n    dispatchMessage({\n      type: \"NEW_MESSAGE\",\n      payload: [\n        {\n          message: `${user} has left the lobby.`,\n          sender: \"Admin\",\n          to: \"Everyone\",\n          sendType: -1,\n        },\n      ],\n    });\n  };\n\n  useEffect(() => {\n    if (usernameChangedSub?.data?.usernameChanged) {\n      const { id, username } = usernameChangedSub.data?.usernameChanged.data;\n      // modify messages to account change of name\n      dispatchMessage({\n        type: \"USERNAME_CHANGED\",\n        payload: usernameChangedSub.data.usernameChanged.data,\n      });\n      // modify user with the new username\n      setCurrentLobbyUsers((currentUsers) =>\n        currentUsers.map((user) =>\n          user.id === id ? { ...user, username: username } : user\n        )\n      );\n    }\n  }, [usernameChangedSub.data]);\n\n  return (\n    <Box sx={chatterContainer}>\n      <MessageBar\n        {...props}\n        setShowLobbyUsers={setShowLobbyUsers}\n        showLobbyUsers={showLobbyUsers}\n      />\n      {showLobbyUsers ? (\n        <UserList users={currentLobbyUsers} />\n      ) : (\n        <Messages messages={messages}>\n          <div ref={bottomDivRef} />\n        </Messages>\n      )}\n      <Divider></Divider>\n      <Sender handleSendMessage={handleSendMessage}></Sender>\n    </Box>\n  );\n}\n\nexport default Chatter;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}