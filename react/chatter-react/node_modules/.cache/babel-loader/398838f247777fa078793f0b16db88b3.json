{"ast":null,"code":"var _jsxFileName = \"/home/xeg/dev/chatter-web/frontend/react/chatter-react/src/components/Chatter/Chatter.tsx\",\n    _s = $RefreshSig$();\n\nimport { useMutation, useQuery, useSubscription } from \"@apollo/client\";\nimport { Divider } from \"@mui/material\";\nimport Box from \"@mui/material/Box\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { useContext, useEffect, useReducer, useRef, useState } from \"react\";\nimport { UsrContxt } from \"../../App\";\nimport { GET_MESSAGES_ON_LOBBY, MESSAGE_ADDED_SUBSCRIPTION, SEND_MESSAGE, USERNAME_CHANGED_SUBSCRIPTION } from \"../../queries/Chatter\";\nimport SendStatus from \"./interface/SendStatus\";\nimport MessageBar from \"./MessageBar\";\nimport Messages from \"./Messages\";\nimport Sender from \"./Sender\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction sendMessageReducer(state, action) {\n  let messages = state;\n\n  switch (action.type) {\n    case \"FETCH_ALL\":\n      console.log(action.payload);\n      return action.payload.map(message => {\n        return {\n          date: new Date(+message.date),\n          message: message.message,\n          sender: message.from.id,\n          senderUsername: message.from.username,\n          to: \"Lobby\",\n          sendStatus: SendStatus.SENT\n        };\n      });\n\n    case SendStatus.FAILED:\n      return {};\n\n    case SendStatus.SENDING:\n      {\n        let {\n          to,\n          sender,\n          message,\n          localDateSent\n        } = action.payload;\n        messages.push(action.payload);\n        action.payload.callback({\n          variables: {\n            addMessageInput: {\n              to,\n              from: sender,\n              message,\n              localDateSent\n            }\n          }\n        });\n        return [...messages];\n      }\n\n    case SendStatus.SENT:\n      {\n        let {\n          localDateSent,\n          sender\n        } = action.payload;\n        console.log(action.payload, messages);\n        let targetMessage = messages.filter(message => message.localDateSent === localDateSent && message.sender === sender);\n        targetMessage[0].sendStatus = SendStatus.SENT;\n        console.log(targetMessage);\n        return [...messages];\n      }\n\n    case \"NEW_MESSAGE\":\n      {\n        // todo sort\n        return [...messages, ...action.payload];\n      }\n\n    case \"USERNAME_CHANGED\":\n      {\n        return messages.map(message => {\n          if (message.sender === action.payload.id) return { ...message,\n            senderUsername: action.payload.username\n          };\n          return message;\n        });\n      }\n\n    default:\n      throw new Error();\n  }\n}\n\nfunction Chatter(props) {\n  _s();\n\n  const userContext = useContext(UsrContxt);\n  const bottomDivRef = useRef(null);\n  const theme = useTheme(); // TODO QUERY RESULT ADD PROPER TYPES\n\n  const existingMessages = useQuery(GET_MESSAGES_ON_LOBBY, {\n    variables: {\n      lobbyId: userContext.lobbyId\n    }\n  }); // unless yung state ng message is contained to itself\n\n  const [sendMessage, sendMessageProperties] = useMutation(SEND_MESSAGE);\n  const newMessageSub = useSubscription(MESSAGE_ADDED_SUBSCRIPTION, {\n    variables: {\n      lobbyId: userContext.lobbyId,\n      userId: userContext.userId\n    }\n  });\n  const usernameChangedSub = useSubscription(USERNAME_CHANGED_SUBSCRIPTION, {\n    variables: {\n      lobbyId: userContext.lobbyId,\n      userId: userContext.userId\n    }\n  });\n  const chatterContainer = {\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    bgcolor: theme.chat.bgColor,\n    minWidth: \"inherit\"\n  };\n  let initialMessages = [];\n  const [messages, dispatchMessage] = useReducer(sendMessageReducer, initialMessages);\n  const [initialized, setInitialized] = useState(false);\n\n  const handleSendMessage = message => {\n    const messageStatusIndex = messages.length;\n    dispatchMessage({\n      type: SendStatus.SENDING,\n      payload: {\n        message: message,\n        sender: userContext.userId,\n        senderUsername: userContext.username,\n        to: userContext.lobbyId,\n        sendStatus: SendStatus.SENDING,\n        index: messageStatusIndex,\n        localDateSent: new Date().getTime() + \"\",\n        callback: sendMessage\n      }\n    });\n  };\n\n  useEffect(() => {// bottomDivRef?.current?.scrollIntoView();\n  }, [messages]);\n  useEffect(() => {\n    var _existingMessages$dat, _existingMessages$dat2;\n\n    if (!initialized && (_existingMessages$dat = existingMessages.data) !== null && _existingMessages$dat !== void 0 && (_existingMessages$dat2 = _existingMessages$dat.getMessagesOnLobby) !== null && _existingMessages$dat2 !== void 0 && _existingMessages$dat2.success) {\n      setInitialized(true);\n      dispatchMessage({\n        type: \"FETCH_ALL\",\n        payload: existingMessages.data.getMessagesOnLobby.data\n      });\n    }\n  }, [initialized, existingMessages.data]);\n  useEffect(() => {\n    if (sendMessageProperties !== null && sendMessageProperties !== void 0 && sendMessageProperties.data) {\n      let {\n        message,\n        localDateSent\n      } = sendMessageProperties.data.addMessage;\n      dispatchMessage({\n        type: SendStatus.SENT,\n        payload: { ...message,\n          localDateSent,\n          sender: message.from.id\n        }\n      });\n    }\n\n    if (sendMessageProperties !== null && sendMessageProperties !== void 0 && sendMessageProperties.error) {\n      console.log(\"ERROR HAS OCCURED\");\n    }\n  }, [sendMessageProperties.data, sendMessageProperties === null || sendMessageProperties === void 0 ? void 0 : sendMessageProperties.error]);\n  useEffect(() => {\n    var _newMessageSub$data;\n\n    // todo add types\n    console.log(newMessageSub.data);\n    if (newMessageSub !== null && newMessageSub !== void 0 && (_newMessageSub$data = newMessageSub.data) !== null && _newMessageSub$data !== void 0 && _newMessageSub$data.messageAdded) dispatchMessage({\n      type: \"NEW_MESSAGE\",\n      payload: newMessageSub.data.messageAdded.messages.map(value => ({ ...value,\n        sender: value.from.id,\n        senderUsername: value.from.username,\n        date: new Date(String(value.date))\n      }))\n    });\n  }, [newMessageSub]);\n  useEffect(() => {\n    var _usernameChangedSub$d;\n\n    console.log(usernameChangedSub);\n\n    if (usernameChangedSub !== null && usernameChangedSub !== void 0 && (_usernameChangedSub$d = usernameChangedSub.data) !== null && _usernameChangedSub$d !== void 0 && _usernameChangedSub$d.usernameChanged) {\n      dispatchMessage({\n        type: \"USERNAME_CHANGED\",\n        payload: usernameChangedSub.data.usernameChanged.data\n      });\n    }\n  }, [usernameChangedSub.data]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: chatterContainer,\n    children: [/*#__PURE__*/_jsxDEV(MessageBar, { ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Messages, {\n      messages: messages,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: bottomDivRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Sender, {\n      handleSendMessage: handleSendMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 240,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Chatter, \"stvvo8cQu2PwGu6BWiOTnorODV8=\", false, function () {\n  return [useTheme, useQuery, useMutation, useSubscription, useSubscription];\n});\n\n_c = Chatter;\nexport default Chatter;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chatter\");","map":{"version":3,"names":["useMutation","useQuery","useSubscription","Divider","Box","useTheme","useContext","useEffect","useReducer","useRef","useState","UsrContxt","GET_MESSAGES_ON_LOBBY","MESSAGE_ADDED_SUBSCRIPTION","SEND_MESSAGE","USERNAME_CHANGED_SUBSCRIPTION","SendStatus","MessageBar","Messages","Sender","sendMessageReducer","state","action","messages","type","console","log","payload","map","message","date","Date","sender","from","id","senderUsername","username","to","sendStatus","SENT","FAILED","SENDING","localDateSent","push","callback","variables","addMessageInput","targetMessage","filter","Error","Chatter","props","userContext","bottomDivRef","theme","existingMessages","lobbyId","sendMessage","sendMessageProperties","newMessageSub","userId","usernameChangedSub","chatterContainer","height","display","flexDirection","bgcolor","chat","bgColor","minWidth","initialMessages","dispatchMessage","initialized","setInitialized","handleSendMessage","messageStatusIndex","length","index","getTime","data","getMessagesOnLobby","success","addMessage","error","messageAdded","value","String","usernameChanged"],"sources":["/home/xeg/dev/chatter-web/frontend/react/chatter-react/src/components/Chatter/Chatter.tsx"],"sourcesContent":["import {\n  QueryResult,\n  SubscriptionResult,\n  useMutation,\n  useQuery,\n  useSubscription,\n} from \"@apollo/client\";\nimport { Divider, SxProps } from \"@mui/material\";\nimport Box from \"@mui/material/Box\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { useContext, useEffect, useReducer, useRef, useState } from \"react\";\nimport { UsrContxt } from \"../../App\";\nimport {\n  GET_MESSAGES_ON_LOBBY,\n  MESSAGE_ADDED_SUBSCRIPTION,\n  SEND_MESSAGE,\n  USERNAME_CHANGED_SUBSCRIPTION,\n} from \"../../queries/Chatter\";\nimport Message from \"./interface/Message\";\nimport NewMessageSubResponse from \"./interface/response/NewMessageSubResponse\";\nimport UsernameChangedSubResponse from \"./interface/response/UsernameChangedSubResponse\";\nimport SendStatus from \"./interface/SendStatus\";\nimport MessageBar from \"./MessageBar\";\nimport Messages from \"./Messages\";\nimport Sender from \"./Sender\";\ninterface LobbyIdProps {\n  lobbyId: string;\n}\n\ninterface UserIdProps {\n  userIdProps: string;\n}\n\ninterface ChatterProps {\n  chatHidden: boolean;\n  setChatHidden: Function;\n}\n\ntype MESSAGEACTIONTYPE =\n  | { type: \"FETCH_ALL\"; payload: any } // todo change proper types\n  | { type: SendStatus.FAILED; payload: Message & { localDateSent: string } }\n  | {\n      type: SendStatus.SENDING;\n      payload: Message & { index: number; callback: Function };\n    }\n  | { type: SendStatus.SENT; payload: Message & { localDateSent: string } }\n  | { type: \"NEW_MESSAGE\"; payload: Message[] }\n  | {\n      type: \"USERNAME_CHANGED\";\n      payload: { username: string; id: string };\n    };\n\nfunction sendMessageReducer(\n  state: Message[],\n  action: MESSAGEACTIONTYPE\n): Message[] {\n  let messages = state;\n  switch (action.type) {\n    case \"FETCH_ALL\":\n      console.log(action.payload);\n      return action.payload.map((message: any): Message => {\n        return {\n          date: new Date(+message.date),\n          message: message.message,\n          sender: message.from.id,\n          senderUsername: message.from.username,\n          to: \"Lobby\",\n          sendStatus: SendStatus.SENT,\n        };\n      });\n    case SendStatus.FAILED:\n      return {} as Message[];\n    case SendStatus.SENDING: {\n      let { to, sender, message, localDateSent } = action.payload;\n      messages.push(action.payload);\n      action.payload.callback({\n        variables: {\n          addMessageInput: {\n            to,\n            from: sender,\n            message,\n            localDateSent,\n          },\n        },\n      });\n      return [...messages];\n    }\n    case SendStatus.SENT: {\n      let { localDateSent, sender } = action.payload;\n      console.log(action.payload, messages);\n      let targetMessage = messages.filter(\n        (message) =>\n          message.localDateSent === localDateSent && message.sender === sender\n      );\n      targetMessage[0].sendStatus = SendStatus.SENT;\n      console.log(targetMessage);\n      return [...messages];\n    }\n    case \"NEW_MESSAGE\": {\n      // todo sort\n      return [...messages, ...action.payload];\n    }\n    case \"USERNAME_CHANGED\": {\n      return messages.map((message: Message) => {\n        if (message.sender === action.payload.id)\n          return {\n            ...message,\n            senderUsername: action.payload.username,\n          };\n        return message;\n      });\n    }\n    default:\n      throw new Error();\n  }\n}\n\nfunction Chatter(props: ChatterProps) {\n  const userContext = useContext(UsrContxt);\n  const bottomDivRef = useRef<HTMLDivElement>(null);\n  const theme = useTheme();\n  // TODO QUERY RESULT ADD PROPER TYPES\n  const existingMessages: QueryResult<any, any> = useQuery(\n    GET_MESSAGES_ON_LOBBY,\n    { variables: { lobbyId: userContext.lobbyId } }\n  );\n\n  // unless yung state ng message is contained to itself\n  const [sendMessage, sendMessageProperties] = useMutation(SEND_MESSAGE);\n\n  const newMessageSub: SubscriptionResult<\n    { messageAdded: NewMessageSubResponse },\n    { lobbyId: LobbyIdProps; userId: UserIdProps }\n  > = useSubscription(MESSAGE_ADDED_SUBSCRIPTION, {\n    variables: {\n      lobbyId: userContext.lobbyId,\n      userId: userContext.userId,\n    },\n  });\n\n  const usernameChangedSub: SubscriptionResult<\n    {\n      usernameChanged: { data: UsernameChangedSubResponse };\n    },\n    { lobbyId: LobbyIdProps; userId: UserIdProps }\n  > = useSubscription(USERNAME_CHANGED_SUBSCRIPTION, {\n    variables: {\n      lobbyId: userContext.lobbyId,\n      userId: userContext.userId,\n    },\n  });\n\n  const chatterContainer: SxProps = {\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    bgcolor: theme.chat.bgColor,\n    minWidth: \"inherit\",\n  };\n\n  let initialMessages: Message[] = [] as Message[];\n  const [messages, dispatchMessage] = useReducer(\n    sendMessageReducer,\n    initialMessages\n  );\n  const [initialized, setInitialized] = useState<boolean>(false);\n\n  const handleSendMessage = (message: string) => {\n    const messageStatusIndex: number = messages.length;\n\n    dispatchMessage({\n      type: SendStatus.SENDING,\n      payload: {\n        message: message,\n        sender: userContext.userId,\n        senderUsername: userContext.username,\n        to: userContext.lobbyId,\n        sendStatus: SendStatus.SENDING,\n        index: messageStatusIndex,\n        localDateSent: new Date().getTime() + \"\",\n        callback: sendMessage,\n      },\n    });\n  };\n\n  useEffect(() => {\n    // bottomDivRef?.current?.scrollIntoView();\n  }, [messages]);\n\n  useEffect(() => {\n    if (!initialized && existingMessages.data?.getMessagesOnLobby?.success) {\n      setInitialized(true);\n      dispatchMessage({\n        type: \"FETCH_ALL\",\n        payload: existingMessages.data.getMessagesOnLobby.data,\n      });\n    }\n  }, [initialized, existingMessages.data]);\n\n  useEffect(() => {\n    if (sendMessageProperties?.data) {\n      let { message, localDateSent } = sendMessageProperties.data.addMessage;\n      dispatchMessage({\n        type: SendStatus.SENT,\n        payload: { ...message, localDateSent, sender: message.from.id },\n      });\n    }\n\n    if (sendMessageProperties?.error) {\n      console.log(\"ERROR HAS OCCURED\");\n    }\n  }, [sendMessageProperties.data, sendMessageProperties?.error]);\n\n  useEffect(() => {\n    // todo add types\n    console.log(newMessageSub.data);\n    if (newMessageSub?.data?.messageAdded)\n      dispatchMessage({\n        type: \"NEW_MESSAGE\",\n        payload: newMessageSub.data.messageAdded.messages.map((value: any) => ({\n          ...value,\n          sender: value.from.id,\n          senderUsername: value.from.username,\n          date: new Date(String(value.date)),\n        })),\n      });\n  }, [newMessageSub]);\n\n  useEffect(() => {\n    console.log(usernameChangedSub);\n    if (usernameChangedSub?.data?.usernameChanged) {\n      dispatchMessage({\n        type: \"USERNAME_CHANGED\",\n        payload: usernameChangedSub.data.usernameChanged.data,\n      });\n    }\n  }, [usernameChangedSub.data]);\n\n  return (\n    <Box sx={chatterContainer}>\n      <MessageBar {...props}></MessageBar>\n      <Messages messages={messages}>\n        <div ref={bottomDivRef} />\n      </Messages>\n      <Divider></Divider>\n      <Sender handleSendMessage={handleSendMessage}></Sender>\n    </Box>\n  );\n}\n\nexport default Chatter;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}