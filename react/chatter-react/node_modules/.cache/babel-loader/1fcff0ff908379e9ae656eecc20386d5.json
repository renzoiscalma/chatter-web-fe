{"ast":null,"code":"var _jsxFileName = \"/home/xeg/dev/chatter-web/frontend/react/chatter-react/src/index.tsx\";\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ApolloClient, InMemoryCache, ApolloProvider, HttpLink, split } from '@apollo/client';\nimport { GraphQLWsLink } from '@apollo/client/link/subscriptions';\nimport { createClient } from 'graphql-ws';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nconst httpLink = new HttpLink({\n  uri: process.env.REACT_APP_LOCAL_BACKEND_URI\n});\nconst wsLink = new GraphQLWsLink(createClient({\n  url: process.env.REACT_APP_LOCAL_WS_URL ? process.env.REACT_APP_LOCAL_WS_URL : \"\" // connectionParams: { TODO !!!!!\n  //   authToken: userEvent.Token\n  // }\n\n}));\nconst splitLink = split(_ref => {\n  let {\n    query\n  } = _ref;\n  const definition = getMainDefinition(query);\n  console.log(definition);\n  return definition.kind === 'OperationDefinition' && definition.operation === 'subscription';\n}, wsLink, httpLink);\nconst client = new ApolloClient({\n  link: splitLink,\n  cache: new InMemoryCache()\n});\nroot.render( /*#__PURE__*/_jsxDEV(ApolloProvider, {\n  client: client,\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 45,\n  columnNumber: 3\n}, this)); // If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals();","map":{"version":3,"names":["ReactDOM","App","reportWebVitals","ApolloClient","InMemoryCache","ApolloProvider","HttpLink","split","GraphQLWsLink","createClient","getMainDefinition","root","createRoot","document","getElementById","httpLink","uri","process","env","REACT_APP_LOCAL_BACKEND_URI","wsLink","url","REACT_APP_LOCAL_WS_URL","splitLink","query","definition","console","log","kind","operation","client","link","cache","render"],"sources":["/home/xeg/dev/chatter-web/frontend/react/chatter-react/src/index.tsx"],"sourcesContent":["import ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ApolloClient, InMemoryCache, ApolloProvider, HttpLink, split } from '@apollo/client';\nimport { GraphQLWsLink } from '@apollo/client/link/subscriptions';\nimport { createClient } from 'graphql-ws';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport userEvent from '@testing-library/user-event';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\n\nconst httpLink = new HttpLink({\n  uri: process.env.REACT_APP_LOCAL_BACKEND_URI,\n})\n\nconst wsLink = new GraphQLWsLink(createClient({\n  url: process.env.REACT_APP_LOCAL_WS_URL ? process.env.REACT_APP_LOCAL_WS_URL : \"\",\n  // connectionParams: { TODO !!!!!\n  //   authToken: userEvent.Token\n  // }\n}))\n\nconst splitLink = split(\n  ({ query }) => {\n      const definition = getMainDefinition(query);\n      console.log(definition);\n      return (\n        definition.kind === 'OperationDefinition' &&\n        definition.operation === 'subscription'\n      )\n  },\n  wsLink,\n  httpLink,\n);\n\nconst client = new ApolloClient({\n  link: splitLink,\n  cache: new InMemoryCache(),\n});\n\nroot.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"mappings":";AAAA,OAAOA,QAAP,MAAqB,kBAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,YAAT,EAAuBC,aAAvB,EAAsCC,cAAtC,EAAsDC,QAAtD,EAAgEC,KAAhE,QAA6E,gBAA7E;AACA,SAASC,aAAT,QAA8B,mCAA9B;AACA,SAASC,YAAT,QAA6B,YAA7B;AACA,SAASC,iBAAT,QAAkC,0BAAlC;;AAGA,MAAMC,IAAI,GAAGX,QAAQ,CAACY,UAAT,CACXC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CADW,CAAb;AAIA,MAAMC,QAAQ,GAAG,IAAIT,QAAJ,CAAa;EAC5BU,GAAG,EAAEC,OAAO,CAACC,GAAR,CAAYC;AADW,CAAb,CAAjB;AAIA,MAAMC,MAAM,GAAG,IAAIZ,aAAJ,CAAkBC,YAAY,CAAC;EAC5CY,GAAG,EAAEJ,OAAO,CAACC,GAAR,CAAYI,sBAAZ,GAAqCL,OAAO,CAACC,GAAR,CAAYI,sBAAjD,GAA0E,EADnC,CAE5C;EACA;EACA;;AAJ4C,CAAD,CAA9B,CAAf;AAOA,MAAMC,SAAS,GAAGhB,KAAK,CACrB,QAAe;EAAA,IAAd;IAAEiB;EAAF,CAAc;EACX,MAAMC,UAAU,GAAGf,iBAAiB,CAACc,KAAD,CAApC;EACAE,OAAO,CAACC,GAAR,CAAYF,UAAZ;EACA,OACEA,UAAU,CAACG,IAAX,KAAoB,qBAApB,IACAH,UAAU,CAACI,SAAX,KAAyB,cAF3B;AAIH,CARoB,EASrBT,MATqB,EAUrBL,QAVqB,CAAvB;AAaA,MAAMe,MAAM,GAAG,IAAI3B,YAAJ,CAAiB;EAC9B4B,IAAI,EAAER,SADwB;EAE9BS,KAAK,EAAE,IAAI5B,aAAJ;AAFuB,CAAjB,CAAf;AAKAO,IAAI,CAACsB,MAAL,eACE,QAAC,cAAD;EAAgB,MAAM,EAAEH,MAAxB;EAAA,uBACE,QAAC,GAAD;IAAA;IAAA;IAAA;EAAA;AADF;EAAA;EAAA;EAAA;AAAA,QADF,E,CAMA;AACA;AACA;;AACA5B,eAAe"},"metadata":{},"sourceType":"module"}