{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { print } from \"graphql\";\nimport { ApolloLink } from \"../core/index.js\";\nimport { isNonNullObject, Observable } from \"../../utilities/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\n\nfunction isLikeCloseEvent(val) {\n  return isNonNullObject(val) && 'code' in val && 'reason' in val;\n}\n\nvar GraphQLWsLink = function (_super) {\n  __extends(GraphQLWsLink, _super);\n\n  function GraphQLWsLink(client) {\n    var _this = _super.call(this) || this;\n\n    _this.client = client;\n    return _this;\n  }\n\n  GraphQLWsLink.prototype.request = function (operation) {\n    var _this = this;\n\n    return new Observable(function (observer) {\n      return _this.client.subscribe(__assign(__assign({}, operation), {\n        query: print(operation.query)\n      }), {\n        next: observer.next.bind(observer),\n        complete: observer.complete.bind(observer),\n        error: function (err) {\n          if (err instanceof Error) {\n            return observer.error(err);\n          }\n\n          if (isLikeCloseEvent(err)) {\n            return observer.error(new Error(\"Socket closed with event \".concat(err.code, \" \").concat(err.reason || \"\")));\n          }\n\n          return observer.error(new ApolloError({\n            graphQLErrors: Array.isArray(err) ? err : [err]\n          }));\n        }\n      });\n    });\n  };\n\n  return GraphQLWsLink;\n}(ApolloLink);\n\nexport { GraphQLWsLink };","map":{"version":3,"mappings":";AA8BA,SAASA,KAAT,QAAsB,SAAtB;AAGA,SAASC,UAAT,QAAmD,kBAAnD;AACA,SAASC,eAAT,EAA0BC,UAA1B,QAA4C,0BAA5C;AACA,SAASC,WAAT,QAA4B,uBAA5B;;AASA,SAASC,gBAAT,CAA0BC,GAA1B,EAAsC;EACpC,OAAOJ,eAAe,CAACI,GAAD,CAAf,IAAwB,UAAUA,GAAlC,IAAyC,YAAYA,GAA5D;AACD;;AAGD;EAAmCC;;EACjC,uBAA4BC,MAA5B,EAA0C;IAA1C,YACEC,qBAAO,IADT;;IAA4BC;;EAE3B;;EAEMC,kCAAP,UAAeC,SAAf,EAAmC;IAAnC;;IACE,OAAO,IAAIT,UAAJ,CAAe,UAACU,QAAD,EAAS;MAC7B,OAAOH,KAAI,CAACF,MAAL,CAAYM,SAAZ,CAAqBC,sBACrBH,SADqB,GACZ;QAAEI,KAAK,EAAEhB,KAAK,CAACY,SAAS,CAACI,KAAX;MAAd,CADY,CAArB,EAEL;QACEC,IAAI,EAAEJ,QAAQ,CAACI,IAAT,CAAcC,IAAd,CAAmBL,QAAnB,CADR;QAEEM,QAAQ,EAAEN,QAAQ,CAACM,QAAT,CAAkBD,IAAlB,CAAuBL,QAAvB,CAFZ;QAGEO,KAAK,EAAE,UAACC,GAAD,EAAI;UACT,IAAIA,GAAG,YAAYC,KAAnB,EAA0B;YACxB,OAAOT,QAAQ,CAACO,KAAT,CAAeC,GAAf,CAAP;UACD;;UAED,IAAIhB,gBAAgB,CAACgB,GAAD,CAApB,EAA2B;YACzB,OAAOR,QAAQ,CAACO,KAAT,CAEL,IAAIE,KAAJ,CACE,mCAA4BD,GAAG,CAACE,IAAhC,EAAoC,GAApC,EAAoCC,MAApC,CAAwCH,GAAG,CAACI,MAAJ,IAAc,EAAtD,CADF,CAFK,CAAP;UAMD;;UAED,OAAOZ,QAAQ,CAACO,KAAT,CACL,IAAIhB,WAAJ,CAAgB;YACdsB,aAAa,EAAEC,KAAK,CAACC,OAAN,CAAcP,GAAd,IAAqBA,GAArB,GAA2B,CAACA,GAAD;UAD5B,CAAhB,CADK,CAAP;QAKD;MAtBH,CAFK,CAAP;IA2BD,CA5BM,CAAP;EA6BD,CA9BM;;EA+BT;AAAC,CApCD,CAAmCpB,UAAnC","names":["print","ApolloLink","isNonNullObject","Observable","ApolloError","isLikeCloseEvent","val","__extends","client","_super","_this","GraphQLWsLink","operation","observer","subscribe","__assign","query","next","bind","complete","error","err","Error","code","concat","reason","graphQLErrors","Array","isArray"],"sources":["/home/xeg/dev/chatter-web/frontend/react/chatter-react/node_modules/@apollo/src/link/subscriptions/index.ts"],"sourcesContent":["// This file is adapted from the graphql-ws npm package:\n// https://github.com/enisdenjo/graphql-ws\n//\n// Most of the file comes from that package's README; some other parts (such as\n// isLikeCloseEvent) come from its source.\n//\n// Here's the license of the original code:\n//\n// The MIT License (MIT)\n//\n// Copyright (c) 2020-2021 Denis Badurina\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport { print } from \"graphql\";\nimport type { Client } from \"graphql-ws\";\n\nimport { ApolloLink, Operation, FetchResult } from \"../core\";\nimport { isNonNullObject, Observable } from \"../../utilities\";\nimport { ApolloError } from \"../../errors\";\n\ninterface LikeCloseEvent {\n  /** Returns the WebSocket connection close code provided by the server. */\n  readonly code: number;\n  /** Returns the WebSocket connection close reason provided by the server. */\n  readonly reason: string;\n}\n\nfunction isLikeCloseEvent(val: unknown): val is LikeCloseEvent {\n  return isNonNullObject(val) && 'code' in val && 'reason' in val;\n}\n\n\nexport class GraphQLWsLink extends ApolloLink {\n  constructor(public readonly client: Client) {\n    super();\n  }\n\n  public request(operation: Operation): Observable<FetchResult> {\n    return new Observable((observer) => {\n      return this.client.subscribe<FetchResult>(\n        { ...operation, query: print(operation.query) },\n        {\n          next: observer.next.bind(observer),\n          complete: observer.complete.bind(observer),\n          error: (err) => {\n            if (err instanceof Error) {\n              return observer.error(err);\n            }\n\n            if (isLikeCloseEvent(err)) {\n              return observer.error(\n                // reason will be available on clean closes\n                new Error(\n                  `Socket closed with event ${err.code} ${err.reason || \"\"}`\n                )\n              );\n            }\n\n            return observer.error(\n              new ApolloError({\n                graphQLErrors: Array.isArray(err) ? err : [err],\n              })\n            );\n          },\n        }\n      );\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}