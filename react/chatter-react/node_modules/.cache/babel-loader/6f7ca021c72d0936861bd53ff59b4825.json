{"ast":null,"code":"var _jsxFileName = \"/home/xeg/dev/chatter-web/frontend/react/chatter-react/src/components/Chatter/Chatter.tsx\",\n    _s = $RefreshSig$();\n\nimport { useContext, useEffect, useReducer, useState } from 'react';\nimport Box from '@mui/material/Box';\nimport { Divider } from '@mui/material';\nimport Messages from './Messages';\nimport Sender from './Sender';\nimport SendStatus from './interface/SendStatus';\nimport { useMutation, useQuery, useSubscription } from '@apollo/client';\nimport { GET_MESSAGES_ON_LOBBY, MESSAGE_ADDED_SUBSCRIPTION, SEND_MESSAGE } from '../Queries/Chatter';\nimport { UserContext } from '../Layout/Layout';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction sendMessageReducer(state, action) {\n  let messages = state;\n  console.log(action.payload);\n\n  switch (action.type) {\n    case \"FETCH_ALL\":\n      return action.payload.map(message => {\n        return {\n          date: new Date(+message.date),\n          message: message.message,\n          sender: message.from.id,\n          to: \"Lobby\",\n          sendStatus: SendStatus.SENT\n        };\n      });\n\n    case SendStatus.FAILED:\n      return {};\n\n    case SendStatus.SENDING:\n      {\n        let {\n          to,\n          sender,\n          message,\n          localDateSent\n        } = action.payload;\n        messages.push(action.payload);\n        action.payload.callback({\n          variables: {\n            to,\n            from: sender,\n            message,\n            localDateSent\n          }\n        });\n        return [...messages];\n      }\n\n    case SendStatus.SENT:\n      {\n        let {\n          localDateSent,\n          sender\n        } = action.payload;\n        console.log(action.payload, messages);\n        let targetMessage = messages.filter(message => message.localDateSent === localDateSent && message.sender === sender);\n        targetMessage[0].sendStatus = SendStatus.SENT;\n        console.log(targetMessage);\n        return [...messages];\n      }\n\n    case \"NEW_MESSAGE\":\n      {\n        // todo sort \n        return [...messages, ...action.payload];\n      }\n\n    default:\n      throw new Error();\n  }\n}\n\nfunction Chatter() {\n  _s();\n\n  const userContext = useContext(UserContext); // TODO QUERY RESULT ADD PROPER TYPES\n\n  const existingMessages = useQuery(GET_MESSAGES_ON_LOBBY, {\n    variables: {\n      lobbyId: userContext.lobbyId\n    }\n  }); // unless yung state ng message is contained to itself\n\n  const [sendMessage, sendMessageProperties] = useMutation(SEND_MESSAGE);\n  const newMessage = useSubscription(MESSAGE_ADDED_SUBSCRIPTION, {\n    variables: {\n      lobbyId: userContext.lobbyId,\n      userId: userContext.userId\n    }\n  });\n  const chatterContainer = {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column'\n  };\n  let initialMessages = [];\n  const [messages, dispatchMessage] = useReducer(sendMessageReducer, initialMessages);\n  const [initialized, setInitialized] = useState(false);\n\n  const handleSendMessage = message => {\n    const messageStatusIndex = messages.length;\n    dispatchMessage({\n      type: SendStatus.SENDING,\n      payload: {\n        message: message,\n        sender: userContext.userId,\n        to: userContext.lobbyId,\n        sendStatus: SendStatus.SENDING,\n        index: messageStatusIndex,\n        localDateSent: new Date().getTime() + \"\",\n        callback: sendMessage\n      }\n    });\n  };\n\n  useEffect(() => {\n    var _existingMessages$dat, _existingMessages$dat2;\n\n    if (!initialized && (_existingMessages$dat = existingMessages.data) !== null && _existingMessages$dat !== void 0 && (_existingMessages$dat2 = _existingMessages$dat.getMessagesOnLobby) !== null && _existingMessages$dat2 !== void 0 && _existingMessages$dat2.success) {\n      setInitialized(true);\n      dispatchMessage({\n        type: \"FETCH_ALL\",\n        payload: existingMessages.data.getMessagesOnLobby.data\n      });\n    }\n  }, [initialized, existingMessages.data]);\n  useEffect(() => {\n    if (sendMessageProperties !== null && sendMessageProperties !== void 0 && sendMessageProperties.data) {\n      let {\n        message,\n        localDateSent\n      } = sendMessageProperties.data.addMessage;\n      dispatchMessage({\n        type: SendStatus.SENT,\n        payload: { ...message,\n          localDateSent,\n          sender: message.from.id\n        }\n      });\n    }\n\n    if (sendMessageProperties !== null && sendMessageProperties !== void 0 && sendMessageProperties.error) {\n      console.log('ERROR HAS OCCURED');\n    }\n  }, [sendMessageProperties.data, sendMessageProperties === null || sendMessageProperties === void 0 ? void 0 : sendMessageProperties.error]);\n  useEffect(() => {\n    var _newMessage$data;\n\n    // todo add types\n    if (newMessage !== null && newMessage !== void 0 && (_newMessage$data = newMessage.data) !== null && _newMessage$data !== void 0 && _newMessage$data.messageAdded) dispatchMessage({\n      type: \"NEW_MESSAGE\",\n      payload: newMessage.data.messageAdded.messages\n    });\n  }, [newMessage]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: chatterContainer,\n    children: [/*#__PURE__*/_jsxDEV(Messages, {\n      messages: messages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Sender, {\n      handleSendMessage: handleSendMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Chatter, \"SGnaJimfxUUr5KfyLl1gotYzLM8=\", false, function () {\n  return [useQuery, useMutation, useSubscription];\n});\n\n_c = Chatter;\nexport default Chatter;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chatter\");","map":{"version":3,"names":["useContext","useEffect","useReducer","useState","Box","Divider","Messages","Sender","SendStatus","useMutation","useQuery","useSubscription","GET_MESSAGES_ON_LOBBY","MESSAGE_ADDED_SUBSCRIPTION","SEND_MESSAGE","UserContext","sendMessageReducer","state","action","messages","console","log","payload","type","map","message","date","Date","sender","from","id","to","sendStatus","SENT","FAILED","SENDING","localDateSent","push","callback","variables","targetMessage","filter","Error","Chatter","userContext","existingMessages","lobbyId","sendMessage","sendMessageProperties","newMessage","userId","chatterContainer","height","display","flexDirection","initialMessages","dispatchMessage","initialized","setInitialized","handleSendMessage","messageStatusIndex","length","index","getTime","data","getMessagesOnLobby","success","addMessage","error","messageAdded"],"sources":["/home/xeg/dev/chatter-web/frontend/react/chatter-react/src/components/Chatter/Chatter.tsx"],"sourcesContent":["import { useContext, useEffect, useReducer, useState } from 'react';\nimport Box from '@mui/material/Box';\nimport { Divider, SxProps } from '@mui/material';\nimport Messages from './Messages';\nimport Sender from './Sender';\nimport Message from './interface/Message';\nimport SendStatus from './interface/SendStatus';\nimport { QueryResult, useMutation, useQuery, useSubscription } from '@apollo/client';\nimport { GET_MESSAGES_ON_LOBBY, MESSAGE_ADDED_SUBSCRIPTION, SEND_MESSAGE } from '../Queries/Chatter';\nimport { UserContext } from '../Layout/Layout';\n\ntype MESSAGEACTIONTYPE = \n\t| {type: \"FETCH_ALL\", payload: any } // todo change proper types\n\t| {type: SendStatus.FAILED, payload: Message & {localDateSent: string} }\n\t| {type: SendStatus.SENDING, payload: Message & {index: number, callback: Function} }\n\t| {type: SendStatus.SENT, payload: Message & {localDateSent: string } }\n\t| {type: \"NEW_MESSAGE\", payload: Message[]} \n\n\nfunction sendMessageReducer(state: Message[], action: MESSAGEACTIONTYPE): Message[] {\n\tlet messages = state;\n\tconsole.log(action.payload);\n\tswitch(action.type) {\n\t\tcase \"FETCH_ALL\":\n\t\t\treturn action.payload.map((message: any): Message => {\n\t\t\t\treturn {\n\t\t\t\t\tdate: new Date(+message.date),\n\t\t\t\t\tmessage: message.message,\n\t\t\t\t\tsender: message.from.id,\n\t\t\t\t\tto: \"Lobby\",\n\t\t\t\t\tsendStatus: SendStatus.SENT\n\t\t\t\t}\n\t\t\t})\n\t\tcase SendStatus.FAILED:\n\t\t\treturn {} as Message[];\n\t\tcase SendStatus.SENDING: {\n\t\t\tlet {to, sender, message, localDateSent} = action.payload;\n\t\t\tmessages.push(action.payload);\n\t\t\taction.payload.callback({\n\t\t\t\tvariables: {\n\t\t\t\t\tto,\n\t\t\t\t\tfrom: sender,\n\t\t\t\t\tmessage,\n\t\t\t\t\tlocalDateSent\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn [...messages]\n\t\t}\n\t\tcase SendStatus.SENT: {\n\t\t\tlet { localDateSent, sender } = action.payload;\n\t\t\tconsole.log(action.payload, messages)\n\t\t\tlet targetMessage = messages.filter((message) => (\n\t\t\t\tmessage.localDateSent === localDateSent && message.sender === sender\n\t\t\t));\n\t\t\ttargetMessage[0].sendStatus = SendStatus.SENT;\n\t\t\tconsole.log(targetMessage)\n\t\t\treturn [...messages]\n\t\t}\n\t\tcase \"NEW_MESSAGE\": {\n\t\t\t// todo sort \n\t\t\treturn [...messages, ...action.payload];\n\t\t}\n\t\tdefault:\n\t\t\tthrow new Error();\n\t}\n}\n\nfunction Chatter() {\n\tconst userContext = useContext(UserContext);\n\n\t// TODO QUERY RESULT ADD PROPER TYPES\n\tconst existingMessages: QueryResult<any, any> = useQuery(GET_MESSAGES_ON_LOBBY, {\n\t\tvariables: {\n\t\t\tlobbyId: userContext.lobbyId\n\t\t}\n\t});\n\n\t// unless yung state ng message is contained to itself\n\tconst [sendMessage, sendMessageProperties] = useMutation(SEND_MESSAGE);\n\n\tconst newMessage = useSubscription(MESSAGE_ADDED_SUBSCRIPTION, {\n\t\tvariables: {\n\t\t\tlobbyId: userContext.lobbyId,\n\t\t\tuserId: userContext.userId\n\t\t}\n\t});\n\n\tconst chatterContainer: SxProps = {\n\t\theight: '100%',\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'column',\n\t}\n\n\tlet initialMessages: Message[] = [] as Message[];\n\tconst [messages, dispatchMessage] = useReducer(sendMessageReducer, initialMessages);\n\tconst [initialized, setInitialized] = useState<boolean>(false);\n\n\tconst handleSendMessage = (message: string) => {\n\t\tconst messageStatusIndex: number = messages.length;\n\n\t\tdispatchMessage({ type: SendStatus.SENDING, payload: {\n\t\t\t\tmessage: message,\n\t\t\t\tsender: userContext.userId,\n\t\t\t\tto: userContext.lobbyId,\n\t\t\t\tsendStatus: SendStatus.SENDING,\n\t\t\t\tindex: messageStatusIndex,\n\t\t\t\tlocalDateSent: new Date().getTime()+\"\",\n\t\t\t\tcallback: sendMessage\n\t\t\t} \n\t\t});\n\t}\n\n\tuseEffect(() => {\n\t\tif (!initialized && existingMessages.data?.getMessagesOnLobby?.success) {\n\t\t\tsetInitialized(true);\n\t\t\tdispatchMessage({type: \"FETCH_ALL\", payload: existingMessages.data.getMessagesOnLobby.data});\n\t\t}\n\t}, [initialized, existingMessages.data]);\n\n\tuseEffect(() => {\n\t\tif (sendMessageProperties?.data) {\n\t\t\tlet { message, localDateSent } = sendMessageProperties.data.addMessage;\n\t\t\tdispatchMessage({type: SendStatus.SENT, payload: {...message, localDateSent, sender: message.from.id }})\n\t\t}\n\n\t\tif (sendMessageProperties?.error) {\n\t\t\tconsole.log('ERROR HAS OCCURED');\n\t\t}\n\t}, [sendMessageProperties.data, sendMessageProperties?.error])\n\n\tuseEffect(() => {\n\t\t// todo add types\n\t\tif (newMessage?.data?.messageAdded)\n\t\t\tdispatchMessage({type: \"NEW_MESSAGE\", payload: newMessage.data.messageAdded.messages as Message[]})\n\t}, [newMessage]);\n\n\treturn (\n\t\t<Box sx={chatterContainer}>\n\t\t\t<Messages messages={messages}></Messages>\n\t\t\t<Divider></Divider>\n\t\t\t<Sender handleSendMessage={handleSendMessage}></Sender>\n\t\t</Box>\n\t);\n}\n\nexport default Chatter;"],"mappings":"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"},"metadata":{},"sourceType":"module"}